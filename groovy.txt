`e versions-used
`c[2.3]
`e show-version
$ groovy -v
`e implicit-prologue

`e interpreter
$ echo 'println "hi!"' > hi.groovy
$ groovy hi.groovy
`e repl
$ groovysh
`e command-line-program
$ groovy -e 'println "hi world!"'
`e block-delimiters
{}
`e statement-terminator
`c[newline or ;]

`c[newline not a separator inside (), [], triple quote literal, or after binary operator or backslash.]
`e are-expressions-statements
`cyes
`e source-code-encoding

`e end-of-line-comment
`c[// comment]
`e multiple-line-comment
`c[/* comment
another comment */]
`e local-variable
x = 1
def y = 2
Integer z = 3
`e regions-which-define-lexical-scope

`e global-variable

`e constant

`e assignment
x = 1
`e parallel-assignment
(x, y, z) = [1, 2, 3]

`c[// 3 is discarded:]
(x, y) = [1, 2, 3]

`c[// z is set to null:]
(x, y, z) = [1, 2]
`e swap
(x, y) = [y, x]
`e compound-assignment-arithmetic-string-logical-bit

`e increment-and-decrement

`e null
null
`e null-test
v == null
`e undefined-variable-access
`c[raises groovy.lang.MissingPropertyExceptionraises]
`e conditional-expression
x > 0 ? x : -x
`e true-and-false
true false
`e falsehoods
false null 0 0.0 "" [] [:]
`e logical-operators
&& || !
`e relational-expressions
x > 0
`e relational-operators
== != > < >= <=
`e min-and-max
[1, 2, 3].min()
[1, 2, 3].max()

`c[// binary functions:]
Math.min(1, 2)
Math.max(1, 2)
`e three-value-comparison

`e arithmetic-expression
1 + 3
`e arithmetic-operators-addition-subtraction-multiplication-float-division-quotient-modulus
+ - * / `c[??] %
`e integer-division
Math.floor(x / y)
`e integer-division-by-zero
`c[raises java.lang.ArithmeticExceptionraises]
`e float-division
x / y
`e float-division-by-zero
`c[raises java.lang.ArithmeticExceptionraises]
`e power
2 ** 32
`e sqrt
Math.sqrt(2)
`e sqrt-1
Double.NaN
`e transcendental-functions
Math.exp Math.log Math.sin Math.cos Math.tan Math.asin Math.acos Math.atan Math.atan2
`e transcendental-constants
Math.PI
Math.E
`e float-truncation
(int)3.1
Math.round(3.1)
(int)Math.floor(3.1)
(int)Math.ceil(3.1)
`e absolute-value
Math.abs(-3)
`e integer-overflow
`c[becomes type java.math.BigInteger]
`e float-overflow
Double.POSITIVE_INFINITY
`e rational-construction

`e rational-decomposition

`e complex-construction

`e complex-decomposition

`e random-number-uniform-integer-uniform-float-normal-float
rnd = new Random()
rnd.nextInt(100)
rnd.nextDouble()
`e random-seed
rnd = new Random()
rnd.setSeed(17)
`e bit-operators
<< >> & | ^ ~
`e binary-octal-and-hex-literals

`e radix-convert-integer-to-and-from-string-with-radix

`e string-literal
"don't say \"no\""
'don\'t say "no"'
"""don't say "no\""""
'''don't say "no"'''
/don't say "no"/
`e newline-in-literal
`c[// triple quote literals only:]
"""foo
bar"""

'''foo
bar'''
`e literal-escapes
`c[// single and double quotes
// including triple quotes:]
\b \f \n \r \t
\\ \" \'
\u`chhhh \`co \`coo \`cooo

`c[// slash quotes:]
\/
`e here-document
`cnone
`e variable-interpolation
count = 3
item = "ball"

"$count ${item}s"
"""$count ${item}s"""
`e expression-interpolation
"1 + 1 = ${1 + 1}"
"""1 + 1 = ${1 + 1}"""
`e concatenate
s = "Hello, " + "World!"
`e replicate
hbar = "-" * 80
`e sprintf
fmt = "lorem %s %d %.2f"
String.format(fmt, "ipsum", 13, 3.7)
`e translate-case
"lorem".toUpperCase()
"LOREM".toLowerCase()
`e capitalize-string-words
"lorem".capitalize()
`cnone
`e trim
" lorem ".trim()
`e pad
"lorem".padRight(10)
"lorem".padLeft(10)
"lorem.center(10)
`e string-to-number
7 + Integer.parseInt("12")
73.9 + Double.parseDouble(".037")
`e number-to-string
"value: " + 8

`c[// explicit conversion:]
8.toString()
`e join
["do", "re", "mi"].join(" ")
`e split
"do re mi".split()
`e split-in-two

`e split-and-keep-delimiters

`e string-length
"lorem".size()
"lorem".length()
`e index-of-substring
"lorem ipsum".indexOf("ipsum")
`e extract-substring
"lorem ipsum".substring(6, 11)
`e character-lookup
"lorem ipsum"[6]
`e chr-and-ord
(Character)65
(Integer)'A'
`e to-array-of-characters

`e translate-characters

`e delete-characters

`e squeeze-characters

`e literal-custom-delimited-literal

`e character-class-abbreviations-and-anchors
`c[char class abbrevs:]
. \d \D \s \S \w \W

`c[anchors:] ^ $ \b
`e anchors

`e match-test
s = "it is 1999"

if (s =~ /1999/) {
  println("party!")
}
`e case-insensitive-match-test
"Lorem" =~ /(?i)lorem/
`e modifiers
i s
`e substitution
"do re mi mi mi".replaceAll(/mi/, "ma")
`e match-prematch-postmatch

`e group-capture
s = "2010-06-03"
m = s =~ /(\d{4})-(\d{2})-(\d{2})/
yr = m.group(1)
mo = m.group(2)
dy = m.group(3)
`e named-group-capture

`e scan

`e backreference-in-match-and-substitution
"do do" =~ /(\w+) \1/

rx = /(\w+) (\w+)/
"do re".replaceAll(rx, '$2 $1')
`e recursive-regex

`e date-time-type

`e current-date-time
t = new Date()
`e to-unix-epoch-from-unix-epoch
Math.round(t.getTime() / 1000)
t = new Date(1315716177 * 1000)
`e current-unix-epoch

`e strftime

`e strptime

`e parse-date-w-o-format

`e date-parts

`e time-parts

`e build-date-time-from-parts

`e date-subtraction

`e add-duration

`e local-timezone

`e timezone-name-offset-from-utc-is-daylight-savings

`e microseconds

`e sleep

`e timeout

`e literal
a = [1, 2, 3, 4]
`e quote-words

`e size
a.size
`e lookup
a[0]
`e update
a[0] = 'lorem'
`e out-of-bounds-behavior
`c[returns nullreturns]
`e index-of-element
[6, 7, 7, 8].indexOf(7)
[6, 7, 7, 8].lastIndexOf(7)
`c[// returns -1 if not found]
`e slice
`c[// ['b', 'c']:]
['a', 'b', 'c', 'd'][1..2]
`e slice-to-end
`c[// ['b', 'c', 'd']:]
['a', 'b', 'c', 'd'][1..-1]
`e manipulate-back
a = [6, 7, 8]
a.push(9)
`c[// also:]
a << 9
i = a.pop()
`e manipulate-front
a = [6, 7, 8]
a.add(0, 5)
i = a.remove(0)
`e concatenate
[1, 2, 3] + [4, 5, 6]
`e replicate
a = [null] * 10
`e copy

`e arrays-as-function-arguments

`e iterate-over-elements
for (i in [1, 2, 3, 4]) {
  println i
}
`e iterate-over-range

`e instantiate-range-as-array

`e reverse
a = [1, 2, 3]
a.reverse()
`e sort
a = [3, 1, 4, 2]
a.sort()
`e dedupe
a = [1, 2, 2, 3]

`c[// modifies array in place:]
a.unique()
`e membership
[1, 2, 3].contains(7)
![1, 2, 3].contains(7)
`e intersection
[1, 2].intersect([2, 3])
`e union
([1, 2] + [2, 3, 4]).unique()
`e relative-complement-symmetric-difference
[1 2 3] - [2]
`e map
[1, 2, 3].collect() { n -> n * n }
`e filter
[1, 2, 3].findAll() { x -> x > 2 }
`e reduce
[1, 2, 3].inject(0) { x, y -> x + y }
`e universal-and-existential-tests
`cnone
`e shuffle-and-sample
a = [1, 2, 3, 4]
`c[// no return value:]
Collections.shuffle(a)
`e zip
[[1,2,3], ['a', 'b', 'c']].transpose()
`e literal
d = ["t": 1, "f": 0]
`e size
d.size()
`e lookup
d["t"]
`e update
d["t"] = 2
`e out-of-bounds-behavior
`c[returns nullreturns]
`e is-key-present
d.containsKey("t")
`e delete

`e from-array-of-pairs-from-even-length-array

`e merge

`e invert

`e iteration

`e keys-and-values-as-arrays

`e sort-by-values

`e default-value-computed-value

`e define-function
def (x, y) {
  x + y
}
`e invoke-function
add(1, 2)

`c[// parens are optional:]
add 1, 2
`e nested-function

`e missing-argument-behavior
`c[raises groovy.lang.MissingMethodExceptionraises]
`e extra-argument-behavior
`c[raises groovy.lang.MissingMethodExceptionraises]
`e default-argument

`e collect-arguments-in-array

`e pass-array-elements-as-separate-arguments

`e return-value
`c[return arg or last expression evaluated]
`e multiple-return-values
`cnone
`e anonymous-function-literal
sqr = { x -> Math.sqrt x }
`e invoke-anonymous-function
sqr(2)
`e function-as-value

`e function-with-private-state

`e closure

`e generator

`e if
if (n == 0) {
  println("no hits")
}
else if (n == 1) {
  println("one hit")
}
else {
  println(n + " hits")
}
`e while
while (i < 100) {
  i += 1
}
`e break-continue-redo
break continue
`e for
for (i = 0; i < 10; i++) {
  println i
}
`e statement-modifiers

`e raise-exception
throw new Exception("bad arg")
`e catch-exception

`e global-variable-for-last-exception

`e finally

`e uncaught-exception-behavior

`e standard-file-handles
System.in
System.out
System.err
`e read-line-from-stdin

`e end-of-file-behavior

`e chomp

`e write-line-to-stdout
print("Hello, World!\n")
println("Hello, World!")
System.out.print("Hello, World!\n")
System.out.println("Hello, World!")
`e printf
printf("%.2f\n", 3.1415)
`e open-file-for-reading
f = new File("/etc/hosts")

`c[// optional traditional file handle:]
f2 = f.newInputStream()
`e open-file-for-writing
f = new File("/etc/hosts")

`c[// optional traditional file handle:]
f2 = f.newOutputStream()
`e set-file-handle-encoding
new File('/tmp/a_file.txt').withWriter('utf-8') {
  f -> f.writeLine 'λαμβδα'
}
`e open-file-for-appending

`e close-file
`c[// traditional file handle:]
f2.close()
`e close-file-implicitly

`e i-o-error

`e encoding-error

`e read-line

`e iterate-over-file-by-line

`e read-file-into-array-of-strings
a = f.readLines()
`e read-file-into-string
s = f.text
`e write-string

`e write-line

`e flush-file-handle

`e end-of-file-test

`e file-handle-position-get-set

`e temporary-file

`e in-memory-stream

`e file-exists-test-regular-test
f = new File('/etc/hosts')

f.exists()
f.isFile()
`e file-size
f = new File('/etc/hosts')

f.length()
`e is-file-readable-writable-executable
f = new File('etc/hosts')

f.canRead()
f.canWrite()
f.canExecute()
`e set-file-permissions
f = new File("/tmp/foo")

`c[// set owner permissions:]
f.setReadable(true)
f.setWritable(true)
f.setExecutable(true)

`c[// set owner/group/other permissions:]
f.setReadable(true, false)
f.setWritable(true, false)
f.setExecutable(true, false)
`e last-modification-time
`c[// milliseconds since Unix epoch:]
new File("/etc/passwd").lastModified()
`e copy-file-remove-file-rename-file
`c[??]
new File("/tmp/foo").delete()
new File("/tmp/bar").renameTo("/tmp/foo")
`e create-symlink-symlink-test-readlink

`e generate-unused-file-name
`c[// args are prefix and suffix:]
f = File.createTempFile("foo", ".txt")
`e parse-csv

`e generate-csv

`e parse-json
import groovy.json.JsonSlurper

jsonSlurper = new JsonSlurper()
data = jsonSlurper.parseText('{"t": 1, "f": 0}')
`e generate-json
import groovy.json.JsonOutput

JsonOutput.toJson(["t": 1, "f": 0])
`e parse-xml

`e generate-xml

`e working-directory-get-and-set
System.getProperty("user.dir")

`cnone
`e build-pathname

`e dirname-and-basename
f = new File("/etc/hosts")
f.getParent()
f.getName()
`e absolute-pathname
new File("foo").getAbsolutePath()
new File("/foo").getAbsolutePath()
new File("../foo").getCanonicalPath()
new File(".").getCanonicalPath()
`e iterate-over-directory-by-file

`e glob-paths

`e make-directory
new File("/tmp/foo/bar").mkdirs()
`e recursive-copy

`e remove-empty-directory

`e remove-directory-and-contents

`e directory-test
new File("/tmp").isDirectory()
`e generate-unused-directory

`e system-temporary-file-directory

`e command-line-arguments
args.size()
args[0]
args[1]
…
`e program-name
`cnone
`e environment-variable-get-set
System.getenv("HOME")
`e get-pid-parent-pid
`cnone
`e get-user-id-and-name
`cnone
`e exit
System.exit(0)
`e set-signal-handler
`cnone
`e executable-test
new File("/bin/ls").canExecute()
`e external-command
buffer = new StringBuffer()
p = 'ls'.execute()
p.waitForProcessOutput(buffer, buffer)
buffer.toString()
`e shell-escaped-external-command
`cnone
`e command-substitution
`cnone
`e command-line-options

`e compile-library
$ cat Foo.groovy
class Foo {
  static int add(int a, int b) {
    a + b
  }
}

$ groovyc foo.groovy
`e load-library
`c[// import Foo from Foo.groovy:]
import Foo
`e load-library-in-subdirectory
`c[// import Foo from bar/Foo.groovy:]
import bar.Foo
`e hot-patch
`cnone
`e load-error
org.codehaus.groovy.control.MultipleCompilationErrorsException
`e main-routine-in-library
class Foo {
  static void main(String… args) {
    println "main was called"
  }
}
`e library-path
`cnone
`e library-path-environment-variable
$ CLASSPATH=lib groovy main.groovy
`e library-path-command-line-option
$ groovy -cp lib main.groovy
`e simple-global-identifiers
`c[only class identifiers are global]
`e multiple-label-identifiers
`c[Classes defined inside a file with a package declaration at the top.]
`e namespace-label-separator
foo.bar.Baz()
`e declare-namespace
`c[// all non-classes in namespace of a class:]
class Foo {

}
`e subnamespace-declaration
`c[// define class foo.Bar:]
package foo

class Bar {

}
`e import-definitions
`c[// all imports are unqualified:]
import foo.Bar
import foo.Baz
`e import-all-definitions-in-namespace
`c[// import all classes in foo:]
import foo.*
`e shadow-avoidance
import java.math.BigInteger as BigInt
`e list-installed-packaged-install-a-package

`e define-class
class Int {
  public int value
  Int (int n) {
    value = n
  }
}
`e create-object
o = new Int(3)
`e create-blank-object

`e instance-variable-visibility

`e object-literal

`e set-attribute
o.value = 4
`e get-attribute
o.value
`e define-method

`e invoke-method

`e handle-undefined-method-invocation

`e define-class-method

`e invoke-class-method

`e define-class-variable

`e get-and-set-class-variable

`e subclass

`e inspect-type
o.class
o.getClass()
`e basic-types

`e inspect-class

`e has-method

`e message-passing

`e eval

`e list-object-methods
"lorem".metaClass.methods
`e list-object-attributes

`e list-loaded-libraries

`e list-loaded-namespaces

`e inspect-namespace

`e pretty-print

`e source-line-number-and-file-name

`e command-line-documentation

`e get-local-hostname-dns-lookup-reverse-dns-lookup

`e http-get

`e http-post

`e absolute-url-from-base-and-relative-url

`e parse-url

`e url-encode-decode

`e base64-encode-decode

`e test-class

`e run-tests-run-test-method

`e equality-assertion

`e approximate-assertion

`e regex-assertion

`e exception-assertion

`e setup

`e teardown

`e check-syntax

`e flags-for-stronger-and-strongest-warnings

`e lint

`e debugger

`e debugger-commands

`e benchmark-code

`e profile-code

