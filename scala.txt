`e versions-used
2.10
`e show-version
`$[scala -version]
`e hello-world
`c[script:]
`.println(`=["Hello, world!"])

`c[object:]
`*object Hello {
  `*def main(args: `.Array[`.String]) {
    `.println(`=["Hello, world!"])
  }
}

`c[object, using App trait:]
`*object Hello `*extends App {
  `.println(`=["Hello, world!"])
}
`e file-suffixes
.scala
`c[none]
.class
`e interpreter
`$[echo 'println("hello")' > hello.scala]
`$[scala hello.scala]
`e repl
`$[scala]
`e shebang
`$[cat <<EOF > hello.scala
#!/bin/sh
exec scala $0 $@
!#
println("hello")
EOF]

`$[chmod +x hello.scala]
`$[./hello.scala]
`e bytecode-compiler-and-interpreter
`$[cat <<EOF > Hello.scala
`*object Hello `*extends App {
  println("hello")
}
EOF]
`$[scalac Hello.scala]
`$[scala Hello]
`e native-compiler
`e library-which-is-always-imported
java.lang
scala
`e statement-terminator
; or sometimes newline
`e block-delimiters
{ }
`e end-of-line-comment
// comment
`e multiple-line-comment
/* comment
another comment */
`e constant
`c[evaluates 1 + 2 once:]
`*val n = 1 + 2

`c[evaluates 1 + 2 each time n is used:]
`*def n = 1 + 2
`e local-variable
`*var n = 3
n = 4
n + 7
`e unit-type-and-value
`.Unit

()
`e assignment
`*val v = 1
`*var w = 0
w = 1 `c[returns Unit]

`c[assigns the same value to multiple variables; only works when variables are first defined:]
`*val v1, v2 = 0
`*var v3, v4 = 0
`e parallel-assignment
`c[only works when variables are first defined:]
`*val (x, y, z) = (1, 2, 3)
`e compound-assignment-arithmetic-string-logical-bit
+= -= *= /= `c[none] %= `c[none]
+= *=
&= |= ^=
<<= >>= &= |= ^=
`e conditional-expression
`*val n = -3

`*if (n < 0) -n `*else n
`e branch-type-mismatch
`c[expression has type Any:]
`*if (`=true) { "hello" } `*else { 3 }
`e null
`.None `c[type Option[T]]
`=null `c[generally discouraged, but needed for Java interop]
`e nullable-type
`*val list = `.List(`.Some(3), `.None, `.Some(-4))
`e null-test
v.isDefined `c[Option[T]]
v eq `=null `c[Java null]
`e coalesce
`![throws Predef.NoSuchElementException if v is `.None:]
v.get
`c[0 if v is None:]
v.getOrElse(0)
`e nullif
`e expression-type-declaration
1: `.Double
`e let-in
`*val z = {
  `*val x = 3.0
  `*val y = 2.0 * x
  x * y

}
`e where
`e boolean-type
Boolean
`e true-and-false
`=true `=false
`e falsehoods
`=false
`e logical-operators
&& || !
`e relational-operators
== != < > <= >=
`e compare-strings
== != < > <= >=
`e min-and-max
math.min 1 2 `c[or] 1 min 2
math.max 1 2 `c[or] 1 max 2

List(1, 2, 3).min
List(1, 2, 3).max
`e three-value-comparison
`c[defined in scala.math.Ordered[A]:]
0 compare 1
"do" compare "re"
`e integer-type
`.Int `c[type of integer literals]
`.Byte `.Short `.Long `c[other modular types]
`.BigInt `c[arbitrary precision type]
`e integer-literal
-4
`e float-type
`c[type of float literals:]
`.Double

`c[other types:]
`.Float
`e arithmetic-operators
`++ `+- `+* `+/ `c[none] `+%
`e integer-operators
`++ `+- `+* `+/ `+%
`e float-operators
`++ `+- `+* `+/
`e add-integer-and-float
3 `++ 7.0
`e integer-division
13 `+/ 5
`e divmod
7 `+/ 3
7 `+% 3
`c[BigInts only:]
`.BigInt(7) `+[/%] `.BigInt(3)
`e integer-division-by-zero
`![java.lang.ArithmeticException]
`e float-division
7.toDouble / 3 `c[type coercion built into Int]
(7: `.Double) / 3 `c[type ascription, fueled by implicits]
`e float-division-by-zero
evaluates to Infinity, NaN, or -Infinity, values which do not have literals
`e power
math.pow(2, 32)
`e sqrt
math.sqrt(2)
`e sqrt-1
math.sqrt(-1) evaluates to NaN, a value which has no literal
`e transcendental-functions
math.exp math.log

math.sin math.cos math.tan

math.asin math.acos math.atan math.atan2
`e transcendental-constants
math.Pi

math.E
`e float-truncation
3.14.toInt `c[or] 3.14.toLong
3.14.round
3.14.floor `c[returns Double]
3.14.ceil `c[returns Double]
`e absolute-value-and-signum
math.abs(-7)
math.signum(-7)
`e integer-overflow
modular arithmetic for all types except BigInt
`e float-overflow
evaluates to Infinity, a value which has no literal
`e arbitrary-length-integer
`*val n = BigInt(7)
`*val m = BigInt(12)
`e arbitrary-length-integer-operators
n + m
n - m
n * m
n / m
n % m

n == m
n < m
n < m
n <= m
n >= m
`e rational-type

`e rational-construction

`e rational-decomposition

`e complex-type

`e complex-constants

`e complex-operators

`e complex-construction

`e complex-decomposition

`e random-number-uniform-integer-uniform-float-normal-float
`*import scala.util.Random

`*val rnd = Random

rnd.nextInt(100)
rnd.nextDouble
rnd.nextGaussian
`e random-seed
`*import scala.util.Random

`*val rnd = Random

rnd.setSeed(17)
`c[none]
`c[none]
`e bit-operators
1 << 4
1 >> 4
1 & 3
1 | 3
1 ^ 3
~ 1
`e binary-octal-and-hex-literals
`c[none]
052
0x2a
`e radix-convert-integer-to-and-from-string-with-radix
Integer.toString(42, 7)
Integer.parseInt("60", 7)
`e string-type
java.lang.`.String `c[frequently implicitly converted to StringOps or WrappedString]
`e string-literal
`=["Hello, World!"]
`=["""Hello, World!"""]
`e newline-in-literal
`c[in triple quote literal only]
`=["""first line
second line"""]
`e literal-escapes
`%[\b \f \n \r \t \" \'

\uhhhh \o \oo \ooo]
`e are-strings-mutable
no
`e format
`=["foo `%[%s %d %.2f]"].format("bar", 7, 3.1415)
`e concatenate-strings
`=["Hello"] + `=[", "] + `=["World!"]
`=["Hello"] ++ `=[", "] ++ `=["World!"]
`e replicate-string
`*val hbar = "-" * 80
`e translate-case
"hello".toUpperCase
"HELLO".toLowerCase
`e capitalize
"hello".capitalize
`e trim
" hello ".trim
`e pad
??

"hello".padTo(10, " ").mkString
`e number-to-string
"two: " + 2.toString
"pi: " + 3.14.toString
`e string-to-number
7 + "12".toInt
73.9 + ".037".toFloat
`![raises NumberFormatException if string doesn't completely parse]
`e join
`.List("do", "re", "mi").mkString(" ")
`e split
"do re mi".split(" ")
`e character-type
`.Char
`e character-literal
`=['h']
`e test-character
`=['c'].isLetter
`=['c'].isDigit
`=['c'].isSpaceChar
`=['c'].isUpper
`=['c'].isLower
`e string-length
"hello".length
`e index-of-substring
"hello".indexOf("hell")
`e extract-substring
"hello".substring(0, 4)
`e extract-character
"hello"(0)
`e chr-and-ord
`=['a'].toInt
`=97.toChar
`e to-array-of-characters
`c[implicit --- via Predef.augmentString, to StringOps, or Predef.wrapString, to WrappedString]
`e regex-type
scala.util.matching.Regex
`e literal-custom-delimited-literal
`*val r = `=["lorem|ipsum"].r
`c[none]
`e character-class-abbreviations
`%[. \c \s \S \d \D \w \W \x \O
[:upper:] [:lower:] [:alpha:] [:alnum:] [:digit:] [:xdigit:] [:punct:] [:blank:] [:space:] [:cntrl:] [:graph:] [:print:] [:word:]]
`e anchors
`%[^ $ \A \b \B \< \> \Z]
`e lookahead-positive-negative
`%[(?= `c[...] )
(?! `c[...] )
(?<= `c[...] )
(?<! `c[...] )]
`e match-test
`*if (`=["1999"].r.findFirstIn(s).isDefined)
  `.println("party!")
`e case-insensitive-match-test
`=["`%[(?i)]lorem"].r.findFirstIn("Lorem")
`e modifiers
`%[(?idmsux-idmsux)]
`e substitution
`*val s = "do re mi mi mi"
`*val t = "mi".r.replaceAllIn(s, "ma")
`e match-prematch-postmatch
`*val fm = `=["`%[\\d{4}]"].r.findFirstMatchIn(s)
fm `*match {
  `*case `.Some(m) `+[=>] {
    m.matched
    m.before
    m.after
  }
  `*case `.None `+[=>] ... `c[no match]
}
`e group-capture
`*val rx = `=["""`%[(\d{4})]-`%[(\d{2})]-`%[(\d{2})]"""].r
m = rx.findFirstMatchIn("2010-06-03")
`*val `.List(yr, mo, dy) = m.get.subgroups

`c[only full match:]
`*val rx(yr, mo, dy) = "2010-06-03"
`e named-group-capture
`*val rx = "^(.+)\\.(.+)$".r("file", "suffix")
`*val m = rx.findFirstMatchIn("foo.txt").get

m.group("file")
m.group("suffix")
`e scan
`*val s = "dolor sit amet"
`*val ss: `.Iterator[`.String] = "\\w+".r.findAllIn('\w+', s)
`*val ms: `.Iterator[Match] = "\\w+".r.findAllMatchIn('\w+', s)
`e date-time-type

`e current-date-time

`e current-unix-epoch

`e declare-on-heap
`*val a: `.Array[`.Int] = `*new `.Array(10)
`*val b = `.Array.fill(10)(0)

`e array-initialization-list
`*val a = `.Array(1, 2, 3)
`e array-size
a.length
a.size `c[via implicit conversion to ArrayOps]
`e array-lookup
`*val n = a(0)
`e array-update
a(2) = 4
`e array-out-of-bounds
`![raises java.lang.ArrayIndexOutOfBounds]
`e array-copy
a.clone()
`e array-iterate
`*for (v `+[<-] a) { `c[code] }
a.foreach(v `+[=>] `c[code] )
`e array-sort
`.Array(3, 2, 1, 4).sorted
`e list-name
`.Seq `c[generic trait]
`.List `c[immutable, preferred]
`.ArrayBuffer, `.ListBuffer `c[mutable]
`e list-literal
`c[none; use constructor:]
`.List(1, 2, 3)
`e empty-list
`.Nil
`.List()
`e empty-test
`*val list = `.List(1, 2, 3)
list == `.Nil
list.isEmpty
`e cons
1 :: `.List(2, 3)
`e slice
a.slice(2, 4)
`e head
`.List(1, 2, 3).head
`e tail
`.List(1, 2, 3).tail
`e head-and-tail-of-empty-list
`![NoSuchElementException:]
`.Nil.head
`![UnsupportedOperationException:]
`.Nil.tail
`e list-size
`.List(1, 2, 3).length
`.List(1, 2, 3).size
`e capacity-get-increase
`c[none]
a.sizeHint(10) `c[ArrayBuffer, ListBuffer, or other Builder[Elem, To]]
`e list-lookup
`.List(1, 2, 3)(0)
`e index-of-element
`c[evaluates to 1:]
`.List(7, 8, 9).indexOf(8)
`c[evaluates to -1:]
`.List(7, 8, 9).indexOf(10)
`e list-update
`c[evaluates to List(1, 4, 3]:)
`.List(1, 2, 3).updated(1, 4)
`e list-out-of-bounds
`![raises `.[java.lang.IndexOutOfBoundsException]]
`e concatenate-two-lists-list-of-lists
`.List(1, 2) ::: `.List(3, 4)
`.List(1, 2) ++ `.List(3, 4)
`.List(`.List(1, 2), `.List(3, 4)).flatten
`e list-replicate
`*val a = List.fill(10)(None)
`e last-and-butlast
`.List(1, 2, 3).last
`.List(1, 2, 3).init
`e manipulate-back
`*val a = ListBuffer(6, 7, 8)
a.append(9) `c[or] a += 9

a.remove(a.size - 1) `c[returns removed value]
a.trimEnd(1) `c[does not return value]
`e manipulate-front
`*val a = ListBuffer(6, 7, 8)
a.prepend(5) `c[or] 5 +=: a
a.head
a.remove(0) `c[returns removed value]
a.trimStart(1) `c[does not return value]
`e take
`.List(1, 2, 3).take(2)
`e drop
`.List(1, 2, 3).drop(2)
`e iterate-over-elements
`.List(1, 2, 3).foreach(i `+[=>] println(i))
`e iterate-over-indices-and-elements
`*val a = `.List("do", "re", "mi", "fa")
`*for ((s, i) `+[<-] a.zipWithIndex)
  `.println("%s at index %d".format(s, i))
`e reverse
`.List(1, 2, 3).reverse
`e sort
`.List(1, 3, 2, 4).sortWith((x, y) `+[=>] x < y)
`.List(1, 3, 2, 4).sortWith(`+_ < `+_)
`.List(1, 3, 2, 4).sortWith((x, y) `+[=>] x > y)
`.List(1, 3, 2, 4).sortWith(`+_ > `+_)
`e map
`.List(1, 2, 3).map(x `+[=>] 2 * x)
`.List(1, 2, 3).map(2 * `+_)
`*for (x `+[<-] `.List(1, 2, 3)) `*yield 2 * x
`e filter
`.List(1, 2, 3).filter(x `+[=>] x > 2)
`*for (x `+[<-] `.List(1, 2, 3); `*if x > 2) `*yield x
`e fold-from-left
`.List(1, 2, 3).foldLeft(0)(`+_ + `+_)
`.List(1, 2, 3).foldLeft(0)((x, y) `+[=>] x + y)
(0 /: `.List(1,2,3))(`+_ + `+_)
`e fold-from-right
`.List(1, 2, 3).foldRight(0)(`+_ - `+_)
(`.List(1,2,3) :\ 0)(`+_ + `+_)
`e membership
`.List(1, 2, 3).contains(3)
`e universal-test
`.List(1, 2, 3).forall(`+_ > 2)
`e existential-test
`.List(1, 2, 3).exists(`+_ > 2)
`e intersection
`.List(1, 2) intersect `.List(2, 3, 4) `c[Sets also allow &]
`e union
`.List(1, 2) union `.List(2, 3, 4) `c[Sets also allow |]
`e relative-complement-symmetric-difference
`.List(1, 2) diff `.List(2, 3, 4) `c[Sets also allow &~]

`c[only BitSets:]
`*import scala.collection.BitSet
BitSet(1, 2) ^ BitSet(2, 3, 4)
`e min-and-max-element
`.List(1,2,3).min
`.List(1,2,3).max
`e shuffle-and-sample
`*import scala.util.Random
Random.shuffle(`.List(1, 2, 3, 4))
`*new Random().shuffle(`.List(1, 2, 3, 4))

`c[none]
`e zip
List(1,2,3) zip List("a","b","c")
(List(1,2,3), List("a","b","c")).zipped `c[allows mapping etc. with functions taking 2 arguments rather than a 2-tuple]
`e iterate-over-range
`c[includes 1000000:]
`*for (i `+[<-] 1 to 1000000) { `c[code] }
`c[excludes 1000000:]
`*for (i `+[<-] 0 to 1000000) { `c[code] }
`e instantiate-range-as-list
`.List.range(1, 11)
`e tuple
(1, "hello", `=true)
`e tuple-element-access
(1, "hello", `=true)._1
`e pair-element-access
(12, "December")._1
(12, "December")._2
`e define-function
`c[argument types must be declared:]
`*def add3(x1: `.Int, x2: `.Int, x3: `.Int)
  = x1 + x2 + x3
`*def average(a: `.Double, b: `.Double)
  = (a + b) / 2.0

`c[return value type must be declared if function is recursive:]
`*def factorial(n: `.Int): `.Int =
  `*if (n < 1)
    1
  `*else
    n * factorial(n - 1)
`e invoke-function
`c[3.0:]
average(1, 2 + 3)

`c[4.5:]
average(1, 2) + 3

`c[parens can be omitted when a function takes no arguments, mainly for Java interopability; by convention parens are omitted when the function has no side effects]
`e define-function-with-block-body
`c[braces must be used if body not an expression:]
`*def print_numbers() = {
  println("one")
  println("two")
}
`e apply-function-to-array
`c[only for functions defined with variable number of arguments:]
`*def firstAndLast(a: `.Int`+*) = { `c[...] }
`*val a = List(1, 2, 3)
firstAndLast(a:`+[_*])
`e variable-number-of-arguments
`*def firstAndLast(a: `.Int`+*) = {
  `*if (a.length >= 1) `.println("first: " + a.head)
  `*if (a.length >= 2) `.println("last: " + a.last)
}
`e named-parameters
`*def subtract(m: `.Int, s: `.Int) = m - s

subtract(s = 3, m = 7)
`e named-parameter-default-value
`*def logarithm(x: `.Double,
              base: `.Double = math.exp(1)) =
  math.log(x) / math.log(base)

logarithm(2.718)

logarithm(10, base = 2)
`e piecewise-defined-function
`e recursive-function
`*def range(a:`.Int, b:`.Int): `.List[`.Int] =
  `*if (a > b)
    `.List()
  `*else
    a :: range(a + 1, b)
`e mutually-recursive-functions

`e lambda
(x: `.Double, y: `.Double) `+[=>] (x + y) / 2.0
`e operator-as-function
((`+_:`.Int) * (`+_:w.Int))(3, 7)

`c[implicit Numeric[T] make many math operations implicitly available]

`c[Seqs are automatically functions sending an index to its corresponding element]
`e overload-operator
`c[almost all operators in Scala are just methods with symbolic names:]
`*class Rational(`*val num: `.Int, `*val denom: `.Int) {
  `c[...]
  `*def +(o: Rational)
    = `*new Rational(num * o.denom + o.num * denom, denom * o.denom)
}
`e infix-operator-in-prefix-position
`e function-in-infix-position
unary methods can be used as binary operators
`e currying
`*def plus(x: `.Int)(y: `.Int) = x + y
plus(3)(7)

`c[must follow with underscore for partial application:]
`*def plus2 = plus(2) `+_
plus2(7)
`e composition
`*val f = (x: `.Int) `+[=>] x + 2
`*val g = (x: `.Int) `+[=>] x * 3
(f compose g)(4)
`e function-composition-operator
`*val double = (x: `.Int) `+[=>] 2 * x
`*val quadruple = double compose double

`e lazy-evaluation
`*def arg1(x: `+[=>] `.Int, y: `+[=>] `.Int): `.Int = x
arg1(7, 1 / 0)
`e strict-evaluation
`c[default behavior]
`e if
`*if ( x > 0 )
  println("pos")
`e control-structure-keywords
`*if (x > 0)
  println("pos")
`*else `*if (x < 0)
  println("neg")
`*else
  println("zero")
`e sequencing
println("one")
println("two")
println("three")
`e while
`*var i = 0
`*while (i < 10) {
  printf("%d\n", i)
  i = i+1
}
`e for
`*for (i `+[<-] 1 to 10)
  println(i)
`e for-in-reverse
`e list-iteration
`*for (i `+[<-] `.List.range(1, 11).reverse)
  println(i)
`e loop
`e raise-exception
`*throw `*new Exception("bam!")
`e handle-exception
`*import java.lang.`+_

`*val x = `*try {
  1 / 0
} `*catch {
  `*case e: ArithmeticException `+[=>] 0
}
`e type-of-exceptions

`e user-defined-exception

`e standard-exceptions

`e assert
assert(1 == 0)
`e standard-file-handles
System.in System.out System.err
`e read-line-from-stdin
`*val line = readLine()
`e end-of-file-behavior

`e chomp

`e write-line-to-stdout
println("lorem ipsum")
`e printf

`e open-file-for-reading
`*import scala.io.Source

`*val path = "/etc/hosts"
`*val f = Source.fromFile(path)
`e open-file-for-writing

`e open-file-for-appending

`e close-file
`*import scala.io.Source

f.close
`e i-o-errors

`e read-line
`e iterate-over-file-by-line
`*import scala.io.Source

`*val src = Source.fromFile("/etc/passwd")
`*for (line `+[<-] src.getLines)
  print(line)
`e read-file-into-array-of-strings

`e read-file-into-string

`e write-string

`e write-line
`*val out = new java.io.FileWriter("/tmp/test-scala")
out.write("hello out\n")
out.close
`e flush-file-handle

`e end-of-file-test

`e get-and-set-file-handle-position

`e file-exists-test-regular-test

`e file-size

`e is-file-readable-writable-executable

`e set-file-permissions

`e copy-file-remove-file-rename-file

`e create-symlink-symlink-test-readlink

`e generate-unused-file-name

`e build-pathname

`e dirname-and-basename

`e iterate-over-directory-by-file

`e make-directory

`e remove-empty-directory

`e remove-directory-and-contents

`e directory-test

`e system-temporary-file-directory

`e command-line-arguments
`*object Test {
  `*def main(args: `.Array[`.String]) {
    `*for (arg `+[<-] args)
      println(arg)
  }
}
`e program-name

`e getopt

`e get-and-set-environment-variable

`e get-pid-parent-pid

`e get-user-id-and-name

`e exit

`e set-signal-handler

`e external-command

`e escaped-external-command

`e backticks

`e namespace-example
`c[Baz.scala]
package Foo.Bar;


`*class Baz {
  `*def say() { println("hello"); }
}

`c[Main.scala]
`*import Foo.Bar.Baz;

`*object Main {
  `*def main(args : `.Array[`.String]) {
    `*val baz = new Baz;
    baz.say();
  }
}

to compile and run

`$[scalac Baz.scala]
`$[scalac Main.scala]
`$[scala Main]
hello
`e namespaces

`e file-name-restrictions
`c[none]
`e namespace

`e namespace-creation

`e namespace-alias

`e namespace-separator

`e subnamespace

`e package-manager-setup

`e package-manager-search-install-list-installed

`e compile-app-using-package

`e type-synonym
type Name = `.String
`e sum-type
`*abstract `*class Color
`*case `*object Red `=extends Color
`*case `*object Blue `=extends Color
`*case `*object Green `=extends Color

`*val col = Red

`c[this won’t compile:]
col < Green
`e tuple-product-type-with-one-field
`*class SpecialInt(x: `.Int)
`*val n = new SpecialInt(7)
`e tuple-product-type-with-two-fields
`*class IntPair(a: `.Int, b: `.Int)
`*val p = new IntPair(7, 11)
`e record-product-type
`*case `*class Customer(
  id: `.Int,
  name: `.String,
  address: `.String
)
`e record-product-type-literal
Customer(7,"John","Topeka, KS")
Customer(id=7, name="John", address="Topeka, KS")
`e generic-type
`*class Twosome[A, B](a: A, b: B)

`*val p = new Twosome("pi", 3.14)
`e recursive-type
`*abstract `*class BinaryTree

`*case `*class Tree(left: BinaryTree, right: BinaryTree) `=extends BinaryTree
`*case `*class Leaf(x: `.Int) `=extends BinaryTree
`e pattern-match-sum-type
`*val c:Color = Red;

c `*match { `*case Red `+[=>] "red"; `*case Green `+[=>] "green"; `*case Blue `+[=>] "blue" }
`e pattern-match-product-type

`e pattern-match-guard
`*match { `*case i: `.Int `*if i < 0 `+[=>] - i; `*case i: `.Int `+[=>] i }
`e pattern-match-catchall
`*val c : Color = Green

c `*match { `*case Red `+[=>] "red"; `*case `+_ `+[=>] "not red" }
`e define-class
`*class Counter {
  `*private `*var n = 0
  `*def incr(): `.Unit = { n = n+1 }
  `*def get(): `.Int = { n }
}
`e create-object
`*val c = `*new Counter
`e invoke-method
c.incr
c.get
`e field-access

`e overload-function

`e inheritance

`e invoke-repl
`$[scala]
`e repl-limitations
`e repl-last-value
res0, res1, …
`e help
:help
`e quit

`e inspect-type
repl displays the type of any expression entered
`e inspect-namespace

`e load-source-file

`e load-package

`e search-path

`e set-search-path-on-command-line

