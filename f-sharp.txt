`e version-used
F# 3.0
Mono 3.2
`e show-version
$ fsharpi --help
`e interpreter
$ cat <<EOF > hello.fs

module hello

let main = printfn "hello"

EOF


$ fsharpi --quiet --exec hello.fs
`e shebang
$ cat <<EOF > hello.fs

#light (*
  exec fsharpi --exec $0 --quiet

*)


module hello


printfn "hello"

EOF


$ chmod +x hello.fs

$ ./hello.fs
`e bytecode-compiler-and-interpreter
$ echo 'printfn "hello"' > hello.fs

$ fsharpc hello.fs

$ mono hello.exe
`e native-compiler
none
`e library-which-is-always-imported
Core
`e statement-terminator
;;
`e block-delimiters
( expr ; … )

begin expr ; … end
`e end-of-line-comment
// comment
`e multiple-line-comment
(* comment

another comment *)
`e constant
let n = 1 + 2
`e local-variable
let n = ref 3

n := 4

!n + 7
`e unit-type-and-value
unit

()
`e conditional-expression
let n = -3

let absn = if n < 0 then -n else n
`e branch-type-mismatch
(* compilation error: *)

if true then "hello" else 3
`e null
None

Also this value returned by .NET library functions. It has a type distinct from None:

null
`e nullable-type

`e null-test

`e coalesce

`e nullif

`e expression-type-declaration
float 1
`e let-in
let z =
  let x = 3.0 in
  let y = 2.0 * x in
  x * y
`e where
none
`e boolean-type
bool
`e true-and-false
true false
`e logical-operators
&& || not
`e relational-operators
= <> < > <= >=
`e min-and-max
min 1 2

max 1 2
`e integer-type
int

other integer types:

int32 int64 nativeint
`e integer-literal
-4
`e float-type
float
`e integer-operators
+ - * / %
`e float-operators
+ - * /
`e add-integer-and-float
float 3 + 7.0
`e divmod
7 / 3

7 % 3
`e integer-division-by-zero
System.DivideByZeroException
`e float-division
float 7 / float 3
`e float-division-by-zero
infinity nan or neg_infinity
`e power
2.0 ** 32.0
`e sqrt
sqrt 2.0
`e sqrt-1
nan
`e transcendental-functions
exp log

sin cos tan

asin acos atan atan2
`e transcendental-constants
System.Math.PI

System.Math.E
`e float-truncation
truncate 3.14

round 3.14

floor 3.14 returns float

ceil 3.14 returns float
`e absolute-value-and-signum
abs -7

abs -7.0

sign -7

sign -7.0
`e integer-overflow
modular arithmetic
`e float-overflow
infinity
`e arbitrary-length-integer
// System.Numerics.BigInteger:

let n = 7I

let m = 12I
`e arbitrary-length-integer-operators
n + m

n - m

n * m

n / m

n % m


n = m

n < m

n < m

n <= m

n >= m
`e rational-type

`e rational-construction

`e rational-decomposition

`e complex-type

`e complex-constants

`e complex-operators

`e complex-construction
System.Numerics.Complex(1.0, 2.0)
`e complex-decomposition

`e random-number-uniform-integer-uniform-float-normal-float
let rnd = System.Random()


rnd.Next(0, 100)

rnd.NextDouble()
none
`e random-seed
let rnd = System.Random(17)
none
none
`e bit-operators
1 <<< 4

1 >>> 4

1 &&& 3

1 ||| 3

1 ^^^ 3
~~~ 1
`e binary-octal-and-hex-literals
0b101010

0o52

0x2a
`e radix-convert-integer-to-and-from-string-with-radix

`e string-type
string
`e string-literal
"Hello, World!"
`e newline-in-literal
yes
`e literal-escapes
\b \n \r\ t \" \' \\

\uhhhh \Uhhhhhhhh
`e format
sprintf "foo %s %d %.2f" "bar" 7 3.1415
`e concatenate
"Hello" + ", " + "World!"
`e replicate
String.replicate 80 "-"
`e translate-case
"hello".ToUpper()

"HELLO".ToLower()
`e capitalize

`e trim
" hello ".Trim()

" hello".TrimStart()

"hello ".TrimEnd()
`e pad
"hello".PadLeft(10, ' ')

"hello".PadRight(10, ' ')
`e number-to-string
"two: " + string 2

"pi: " + string 3.14
`e string-to-number
7 + int "12"

73.9 + float ".037
`e join
System.String.Join(" ", ["do"; "re"; "mi"])
`e split
"do re mi".Split(' ')
`e character-type
char
`e character-literal
'h'
`e string-length
"hello".Length
`e index-of-substring
"hello".IndexOf("hell")
`e extract-substring
"hello".Substring(0, 4)
`e extract-character
"hello".[0]
`e chr-and-ord
int 'a'

char 97
`e date-time-type

`e current-date-time

`e current-unix-epoch

`e literal

`e size

`e lookup

`e update

`e out-of-bounds

`e literal
[1; 2; 3]
`e empty-list

`e empty-test

`e cons
1 :: [2; 3]
`e head
List.head [1; 2; 3]
`e tail
List.tail [1; 2; 3]
`e head-and-tail-of-empty-list

`e string-length
List.length [1; 2; 3]
`e list-lookup
List.nth [1; 2; 3] 0
`e index-of-element

`e update

`e concatenate-two-lists-list-of-lists
[1; 2] @ [3; 4]

List.append [1; 2] [3; 4]


List.concat [[1; 2]; [3; 4]]
`e last-and-butlast

`e take

`e drop

`e iterate-over-elements
let f i =
  System.Console.WriteLine(string i)


List.iter f [1; 2; 3]
`e reverse
List.rev [1; 2; 3]
`e sort
List.sort [1; 3; 2; 4]
`e map
List.map (( * ) 2) [1; 2; 3]
`e filter
List.filter ((<) 2) [1; 2; 3]
`e fold-from-left
List.fold (-) 0 [1; 2; 3]
`e fold-from-right

`e membership

`e universal-test
List.forall (fun x -> x > 2) [1; 2; 3]
`e existential-test
List.exists (fun x -> x > 2) [1; 2; 3]
`e zip-lists

`e tuple
(1, "hello", true)
`e tuple-element-access
match (1, "hello", true) with _, x, _ -> x
`e pair-element-access
fst (12, "December")

snd (12, "December")
`e define-function
let average a b = ( a + b ) / 2.0
`e invoke-function
// 4.5:

average 1.0 2.0 + 3.0

// 3.0:

average 1.0 (2.0 + 3.0)
`e define-function-with-block-body

`e named-parameters

`e named-parameter-default-value

`e piecewise-defined-function

`e recursive-function

`e mutually-recursive-functions

`e lambda
fun x -> fun y -> (x + y) / 2.0
`e infix-operator-in-prefix-position

`e function-in-infix-position

`e currying

`e composition

`e function-composition-operator

`e lazy-evaluation

`e strict-evaluation
default behavior
`e if
if x > 0 then
  printfn "pos"
`e control-structure-keywords
if x > 0 then
  printfn "pos"

else
  if x < 0 then
    printfn "neg"
  else
    printfn "zero"
`e sequencing
printfn "one"

printfn "two"

printfn "three"
`e while
let i = ref 0


while !i < 10 do
  printfn "%d" !i
  i := !i + 1
`e for

`e for-in-reverse

`e list-iteration

`e loop

`e raise-error

`e handle-error

`e type-of-exceptions

`e user-defined-exception

`e standard-exceptions

`e assert

`e standard-file-handles
stdin stdout stderr
`e read-line-from-stdin

`e end-of-file-behavior

`e chomp

`e write-line-to-stdout
printfn "lorem ipsum"
`e printf

`e open-file-for-reading

`e open-file-for-writing

`e open-file-for-appending

`e close-file

`e i-o-errors

`e read-line

`e iterate-over-file-by-line

`e read-file-into-array-of-strings

`e read-file-into-string

`e write-string

`e write-line

`e flush-file-handle

`e end-of-file-test

`e get-and-set-file-handle-position

`e file-exists-test-regular-test

`e file-size

`e is-file-readable-writable-executable

`e set-file-permissions

`e copy-file-remove-file-rename-file

`e create-symlink-symlink-test-readlink

`e generate-unused-file-name

`e build-pathname

`e dirname-and-basename

`e iterate-over-directory-by-file

`e make-directory

`e remove-empty-directory

`e remove-directory-and-contents

`e directory-test

`e system-temporary-file-directory

`e command-line-arguments

`e program-name

`e getopt

`e get-and-set-environment-variable

`e get-pid-parent-pid

`e get-user-id-and-name

`e exit

`e set-signal-handler

`e external-command

`e escaped-external-command

`e backticks

`e namespace-example

`e namespaces

`e file-name-restrictions

`e namespace

`e namespace-creation

`e namespace-alias

`e namespace-separator

`e subnamespace

`e package-manager-setup

`e package-manager-search-install-list-installed

`e compile-app-using-package

`e type-synonym
type name = string
`e sum-type
type color = Red | Green | Blue


let col = Red

// evaluates to true:

col < Green
`e tuple-product-type-with-one-field
type special_int = SpecialInt of int


let n = SpecialInt 7
`e tuple-product-type-with-two-fields
type int_pair = IntPair of int * int


let p = IntPair (7, 11)
`e record-product-type
type customer = {
  id: int;
  name: string;
  address: string

}
`e record-product-type-literal
{id=7; name="John"; address="Topeka, KS"}
`e generic-type
type ('a, 'b) twosome =
  Twosome of 'a * 'b


let p = Twosome ("pi", 3.14)
`e recursive-type
type binary_tree =
  | Leaf of int
  | Tree of binary_tree * binary_tree
`e pattern-match-sum-type

`e pattern-match-product-type

`e pattern-match-guard

`e pattern-match-catchall

`e define-class

`e create-object

`e invoke-method

`e field-access

`e overload-function

`e inheritance

`e invoke-repl
Mono:

$ fsharpi

In visual studio, highlight code and press ALT+ENTER.
`e repl-limitations

`e repl-last-value
it
`e help

`e quit
#quit;;
`e inspect-type

`e inspect-namespace

`e load-source-file

`e load-package

`e search-path

`e set-search-path-on-command-line

