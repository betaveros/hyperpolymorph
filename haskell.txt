`e version-used
7.4
`e show-version
$ ghc --version
`e interpreter
$ echo 'main = putStrLn "hello"' > hello.hs


$ runghc hello.hs
`e shebang
$ cat <<EOF > hello.hs

#!/usr/bin/env runghc


main = putStrLn "hello"

EOF


$ chmod +x hello.hs

$ ./hello.hs
`e bytecode-compiler-and-interpreter
none
`e native-compiler
$ echo 'main = putStrLn "hello"' > hello.hs

$ ghc -o hello hello.hs

$ ./hello
`e library-which-is-always-imported
Prelude
`e statement-terminator
next line has equal or less indentation, or ;
`e block-delimiters
offside rule or { }
`e end-of-line-comment
-- comment
`e multiple-line-comment
{- comment

another comment -}
`e constant
n = 3
`e local-variable
n <- return 3
`e unit-type-and-value
()

()
`e conditional-expression
n = -3

let absn = if n < 0 then -n else n
`e branch-type-mismatch
-- compilation error:

if True then "hello" else 3
`e null
Nothing
`e nullable-type
list = [Just(3), Nothing, Just(-4)]
`e null-test

`e coalesce
import Data.Maybe


let foo = Just(3)
raises exception if Nothing:

fromJust foo


let intId x = x
evaluates to 0 if Nothing:

maybe 0 intId foo
`e nullif

`e expression-type-declaration
1 :: Double
`e let-in
z = let x = 3.0
        y = 2.0 * x
    in x * y
`e where
z = x * y
  where x = 3.0
        y = 2.0 * x
`e boolean-type
Bool
`e true-and-false
True False
`e logical-operators
&& || not
`e relational-operators
== /= < > <= >=
`e min-and-max
min 1 2

max 1 2
`e integer-type
Integer
`e integer-literal
an expression, not a literal:

-4
`e float-type
Double
`e integer-operators
+ - * div rem
div and rem are functions, not infix operators
`e float-operators
+ - * /
`e add-integer-and-float
3 + 7.0
`e divmod
div 7 3

rem 7 3
`e integer-division-by-zero
Exception: divide by zero
`e float-division
7 / 3
`e float-division-by-zero
evaluates to Infinity, NaN, or -Infinity, values which do not have literals
`e power
2 ** 32

-- syntax error if exponent not an integer:

2 ^ 32
`e sqrt
sqrt 2
`e sqrt-1
sqrt (-1) evaluates to NaN, a value which has no literal
`e transcendental-functions
exp log

sin cos tan

asin acos atan atan2
`e transcendental-constants
pi

exp 1
`e float-truncation
truncate 3.14

round 3.14

floor 3.14

ceiling 3.14
`e absolute-value-and-signum
abs (-7)

signum (-7)
`e integer-overflow
has arbitrary length integers
`e float-overflow
evaluates to Infinity, a value which has no literal
`e arbitrary-length-integer
-- Integer is arbitrary length type:

let n = 7

let m = 12
`e arbitrary-length-integer-operators
n + m

n - m

n * m

div n m

mod n m


n == m

n < m

n < m

n <= m

n >= m
`e rational-type
Ratio Integer
`e rational-construction
import Data.Ratio


1 % 7
`e rational-decomposition
import Data.Ratio


numerator (1 % 7)

denominator (1 % 7)
`e complex-type
Complex Double
`e complex-constants

`e complex-operators

`e complex-construction
import Data.Complex


1 :+ 2.0
`e complex-decomposition
import Data.Complex


realPart (1 :+ 2)

imagPart (1 :+ 2)

phase (1 :+ 2)

magnitude (1 :+ 2)

conjugate (1 :+ 2)
`e random-number-uniform-integer-uniform-float-normal-float
-- $ cabal install random

import System.Random


getStdRandom (randomR (0, 99))

getStdRandom (randomR (0.0, 1.0))
none
`e random-seed
-- $ cabal install random

import System.Random


setStdGen $ mkStdGen 17

seed <- getStdGen

setStdGen seed
`e bit-operators
import Data.Bits


x = 1 :: Integer

y = 3 :: Integer


shiftL x 4

shiftR x 4

x .&. y

x .|. y

xor x y

complement x
`e binary-octal-and-hex-literals
none

052

0x2a
`e radix-convert-integer-to-and-from-string-with-radix

`e string-type
String
`e string-literal
"Hello, World!"
`e newline-in-literal
no
`e literal-escapes
\a \b \f \n \r \t \v \" \& \' \\

\oo... \d... \xh...

Octal, decimal, and hex escapes denote Unicode characters and can contain anywhere from 1 to 7 digits. The max values are \o4177777, \1114111, and \x10ffff. The \& escape does not represent a character, but can separate a numeric backslash escape sequence from a following digit.
`e format
import Text.Printf


printf "foo %s %d %.2f" "bar" 7 3.1415
`e concatenate
"Hello" ++ ", " ++ "World!"
`e replicate
concat ( replicate 80 "-" )
`e translate-case
import Data.Char


map toUpper "hello"

map toLower "HELLO"
`e capitalize

`e trim

`e pad

`e number-to-string
"two: " ++ (show 2)

"pi: " ++ (show 3.14)
`e string-to-number
7 + (read "12")::Integer

73.9 + (read "0.037")::Double
raises exception if string doesn't completely parse
`e join

`e split

`e character-type
Char
`e character-literal
'h'
`e string-length
length "hello"
`e index-of-substring

`e extract-substring
drop 0 (take 4 "hello")
`e extract-character
"hello" !! 0
`e chr-and-ord
Char.ord 'a'

Char.chr 97
`e date-time-type
ClockTime CalendarTime TimeDiff
`e current-date-time
import Time


t <- getClockTime
`e current-unix-epoch
import System.Time


getClockTime >>= (\(TOD sec _) -> return sec)
`e literal

`e size

`e lookup

`e update

`e out-of-bounds

`e literal
[1, 2, 3]
`e empty-list
[]
`e empty-test
let list = [1, 2, 3]


list == []

null list
`e cons
1 : [2, 3]
`e head
head [1, 2, 3]
`e tail
tail [1, 2, 3]
`e head-and-tail-of-empty-list
exceptions
`e string-length
length [1, 2, 3]
`e list-lookup
[1, 2, 3] !! 0
`e index-of-element
import Data.list

-- Just 1:

elemIndex 8 [7, 8, 9]

-- Nothing:

elemIndex 10 [7, 8, 9]
`e update

`e concatenate-two-lists-list-of-lists
[1, 2] ++ [3, 4]


concat [[1, 2], [3, 4]]
`e last-and-butlast
last [1, 2, 3]

init [1, 2, 3]
`e take
take 2 [1, 2, 3]
`e drop
drop 2 [1, 2, 3]
`e iterate
mapM_ print [1, 2, 3]
`e reverse
reverse [1, 2, 3]
`e sort
import Data.List


sort [1, 3, 2, 4]
`e map
map (\x -> x * x) [1, 2, 3]
`e filter
filter (\x -> x > 2) [1, 2, 3]
`e fold-from-left
foldl (+) 0 [1, 2, 3]
`e fold-from-right
foldr (-) 0 [1, 2, 3]
`e membership
elem 3 [1, 2, 3]
`e universal-test
all (\x -> x > 2) [1, 2, 3]
`e existential-test
any (\x -> x > 2) [1, 2, 3]
`e zip-lists
-- list of tuples:

zip [1, 2, 3] ['a', 'b', 'c']
`e tuple
(1, "hello", True)
`e tuple-element-access
(\(a, _, _) -> a) (1, "hello", True)
`e pair-element-access
fst (12, "December")

snd (12, "December")
`e define-function
average a b = (a + b) / 2.0
`e invoke-function
-- 4.5:

average 1 2 + 3

-- 3.0:

average 1 (2 + 3)

average 1 $ 2 + 3
`e define-function-with-block-body

`e named-parameters
none
`e named-parameter-default-value
none
`e piecewise-defined-function
to_s Red = "red"

to_s Green = "green"

to_s Blue = "blue"
`e recursive-function
range a b = if a > b then [] else a : range (a+1) b
`e mutually-recursive-functions

`e anonymous-function
\x y -> (x+y) / 2.0
`e infix-operator-in-prefix-position
( * ) 3 4
`e function-in-infix-position
add x y = x + y

3 â€˜add`` 4
`e currying
plus2 = (+) 2
`e composition
f x = x + 2

g x = x * 3

(f . g ) 4
`e function-composition-operator
double x = 2 * x

quadruple x = double . double
`e lazy-evaluation
lazy evaluation is default:

arg1 x y = x


arg1 7 (error "bam!")
`e strict-evaluation
arg1 x y = seq y x


arg1 7 (error "bam!")
`e if
if x > 0
  then putStrLn "pos"
  else return ()
`e control-structure-keywords
if x > 0
  then putStrLn "pos"
  else if x < 0
    then putStrLn "neg"
    else putStrLn "zero"
`e sequencing
do
  putStrLn "one"
  putStrLn "two"
  putStrLn "three"
`e while

`e for

`e for-in-reverse

`e list-iteration

`e loop

`e raise-error
error "bam!"
`e handle-error

`e type-of-exceptions

`e user-defined-exception

`e standard-exceptions

`e assert

`e standard-file-handles
import System.Posix.IO


stdInput stdOutput stdError
`e read-line-from-stdin
line <- getLine
`e end-of-file-behavior
when last data is returned, hIsEOF will return True. Reading after end-of-file throws an exception.
`e chomp

`e write-line-to-stdout
putStrLn "lorem ipsum"
`e printf

`e open-file-for-reading
import System.IO


f <- openFile "/etc/hosts" ReadMode
`e open-file-for-writing
import System.IO


f <- openFile "/tmp/test" WriteMode
`e open-file-for-appending
import System.IO


f <- openFile "/tmp/err.log" AppendMode
`e close-file
import System.IO


hClose f
`e i-o-errors

`e read-line
import IO


readAndPrintLines h = do
  eof <- hIsEOF h
  if eof
    then return ()
    else do
      line <- hGetLine h
      putStrLn line
      readAndPrintLines h


main = do
  h <- openFile "/etc/passwd" ReadMode
  readAndPrintLines h
`e iterate-over-file-by-line

`e read-file-into-array-of-strings

`e read-file-into-string

`e write-string

`e write-line
s = "hello out\n"

f = "/tmp/test-haskell"

main = writeFile f s
`e flush-file-handle

`e end-of-file-test

`e get-and-set-filehandle-position

`e file-exists-test-regular-file-test
import System


Directory.doesFileExist "/etc/hosts"


import Control.Monad

import System.Posix.Files


liftM isRegularFile (getFileStatus "/etc/hosts")
`e file-size
import Control.Monad

import System.Posix.Files


liftM fileSize (getFileStatus "/etc/hosts")
`e is-file-readable-writable-executable
import Control.Monad


liftM readable
  (getPermissions "/etc/hosts")

liftM writable
  (getPermissions "/etc/hosts")

liftM executable
  (getPermissions "/etc/hosts")
`e set-file-permissions
import System.Posix.Files


setFileMode "/tmp/foo" ownerModes

setFileMode "/tmp/foo" groupReadMode

setFileMode "/tmp/foo" groupExecuteMode

setFileMode "/tmp/foo" otherReadMode

setFileMode "/tmp/foo" otherExecuteMode
`e copy-file-remove-file-rename-file
import System.Directory


copyFile "/tmp/foo" "/tmp/bar"

removeFile "/tmp/foo"

renameFile "/tmp/bar" "/tmp/foo"
`e create-symlink-symlink-test-readlink
import System.Posix.Files


createSymbolicLink "/etc/hosts" "/tmp/hosts"
??

readSymbolicLink "/tmp/hosts"
`e generate-unused-file-name

`e build-pathname
import System.FilePath ((</>))


let path = "/etc" </> "hosts"
`e dirname-and-basename
import System.FilePath


takeFileName "/etc/hosts"

takeDirectory "/etc/hosts"
`e iterate-over-directory-by-file
import System

-- returns IO [FilePath]

Directory.getDirectoryContents "/etc"
`e make-directory
import System.Directory


createDirectoryIfMissing True
  "/tmp/foo/bar"
`e remove-empty-directory
import System.Directory


removeDirectory "/tmp/foodir"
`e remove-directory-and-contents
import System.Directory


removeDirectoryRecursive "/tmp/foodir"
`e directory-test
import System


Directory.doesDirectoryExist "/tmp"
`e system-temporary-file-directory

`e command-line-arguments
import System


printArgs args = do
  if length args == 0
    then return ()
    else do
      putStrLn (head args)
      printArgs (tail args)

main = do
  a <- getArgs
  printArgs a
`e program-name
import System


s <- getProgName
`e getopt

`e get-and-set-environment-variable
import System.Posix.Env


s <- getEnv "HOME"

putEnv "PATH=/bin"
`e get-pid-parent-pid
import System.Posix.Process


pid <- getProcessID

ppid <- getParentProcessID
`e get-user-id-and-name
import System.Posix.User


uid <- getRealUserID

username <- getLoginName
`e exit
import System.Exit


exitWith ExitSuccess

to return nonzero status:

exitWith (ExitFailure 1)
`e set-signal-handler

`e external-command
import System.Cmd


rawSystem "ls" ["-l", "/tmp"]
`e escaped-external-command

`e backticks

`e namespace-example
Foo/Bar.hs

module Foo.Bar where
  data Baz = Baz
  say Baz = putStrLn "hello"

Main.hs

module Main where

import Foo.Bar

baz = Baz

main = say baz

to compile and run

$ ghc -c Foo/Bar.hs

$ ghc Main.hs

$ ./Main

hello
`e namespaces
values, constructors, type variables, type constructors, type classes, modules
`e file-name-restrictions
module Foo.Bar must be in Foo/Bar.hs
`e namespace
import Data.Bytestring
`e namespace-creation

`e namespace-alias
import qualified Data.Bytestring as B
`e namespace-separator
.
`e subnamespace

`e package-manager-setup

`e package-manager-search-install-list-installed
$ cabal list parsec

$ cabal install parsec

$ cabal list --installed
`e compile-app-using-package

`e type-synonym
type Name = String
`e sum-type
data Color = Red | Green | Blue


col = Red

-- this won't compile:

col < Green
`e tuple-product-type-with-one-field
data SpecialIntType = SpecialInt Integer


n = SpecialInt 7
`e tuple-product-type-with-two-fields
data IntPairType = IntPair Integer Integer


p = IntPair 7 11
`e record-product-type
data CustomerType = Customer {
  customerId :: Integer,
  name :: String,
  address :: String

}
`e record-product-type-literal
Customer {
  customerId=7,
  name="John",
  address="Topeka, KS" }
`e generic-type
data TwosomeType a b = Twosome a b


p = Twosome ("pi", 3.14)
`e recursive-type
data BinaryTree = Leaf Integer | Tree BinaryTree BinaryTree
`e pattern-match-sum-type
c = Red

case c of Red -> "red"
  Green -> "green"
  Blue -> "blue"
`e pattern-match-product-type

`e pattern-match-guard
none, use if or piecewise function definition
`e pattern-match-catchall
c = Green

case c of Red -> "red"; _ -> "not red"
`e define-class

`e create-object

`e invoke-method

`e field-access

`e overload-function

`e inheritance

`e invoke-repl
$ ghci
`e repl-limitations
Must use let to define values and functions; when defining functions with multiple equations the equations must be separated by semicolons; the clauses of case/of statements must be separated by semicolons; it is not possible to define data types.
`e repl-last-value
it
`e help
:?
`e quit

`e inspect-type
let a = 3

:type a
`e inspect-namespace

`e load-source-file
:edit hello.hs

:load hello
`e load-package

`e search-path

`e set-search-path-on-command-line

