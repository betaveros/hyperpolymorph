`e version-used
7.4
`e show-version
`$[ghc --version]
`e hello-world
main = putStrLn `=["hello"]
`e file-suffixes
.hs .lhs
`(none)
.o
`e interpreter
`$[echo 'main = putStrLn "hello"' > hello.hs]
`$[runghc hello.hs]
`e shebang
`$[cat <<EOF > hello.hs
#!/usr/bin/env runghc
main = putStrLn "hello"
EOF]
`$[chmod +x hello.hs]
`$[./hello.hs]
`e bytecode-compiler-and-interpreter
`e native-compiler
`$[echo 'main = putStrLn "hello"' > hello.hs]
`$[ghc -o hello hello.hs]
`$[./hello]
`e library-which-is-always-imported
Prelude
`e statement-terminator
next line has equal or less indentation, or ;
`e block-delimiters
offside rule or { }
`e end-of-line-comment
-- comment
`e multiple-line-comment
{- comment
another comment -}
`e constant
n = 3
`e local-variable
`(Haskell is purely functional and all normal variables are immutable. A maximally functional version of mutable variables may be simulated with Control.Monad.Trans.State, of the transformers package:)
`*import Control.Monad.Trans.State
evalState (`*do
  set 4
  modify (+1)
  fmap (+7) get) 3
`(runState returns (result, state); evalState returns result; execState returns state)
`(A more destructive version uses STRefs in a STRef monad or IORefs in the IO monad:)
`*import Data.IORef
`*do
  n `+[<-] newIORef 3
  writeIORef n 4
  fmap (+7) $ readIORef n

`*import Data.STRef
`*import Control.Monad.ST
runST $ `*do
  n `+[<-] newSTRef 3
  writeSTRef n 4
  fmap (+7) $ readSTRef n
`e unit-type-and-value
()
()
`e conditional-expression
n = -3
`*let absn = `*if n < 0 `*then -n `*else n
`e branch-type-mismatch
`![compilation error:]
`*if `=True `*then "hello" `*else 3
`e null
`.Nothing `(type Maybe a)
`e nullable-type
list = [`.Just 3, `.Nothing, `.Just (-4)]
`e null-test
`*import Data.Maybe

isJust v
`e coalesce
`*import Data.Maybe

`*let foo = `.Just 3
`*let intId x = x

`![raises exception if `.Nothing:]
fromJust foo

`![evaluates to 0 if `.Nothing:]
maybe 0 intId foo
fromMaybe 0 foo
`e nullif

`e expression-type-declaration
1 `+[::] `=Double
`e let-in
z = `*let x = 3.0
        y = 2.0 * x
    `*in x * y
`e where
z = x * y
  `*where x = 3.0
        y = 2.0 * x
`e boolean-type
`.Bool
`e true-and-false
`=True `=False
`e falsehoods
`=False
`e logical-operators
&& || not
`e relational-operators
== /= < > <= >=
`e compare-strings
== /= < > <= >=
`e three-value-comparison
0 ``compare`` 1 `(returns value of type Ordering, one of LT, EQ, or GT)
`e min-and-max
min 1 2
max 1 2
`e integer-type
`.Int `(fixed-width)
`.Integer `(arbitrary length)
`e integer-literal
an expression, not a literal:

-4
`e float-type
Double
`e integer-operators
+ - * ``quot`` ``rem`` ``div`` ``mod``
`(the last four are functions, not infix operators, although they are often used as infix operators by surrounding with backquotes. quot truncates towards 0 and rem's value has the same sign as the dividend; div truncates down and mod returns a nonnegative result.)
`e float-operators
`+[+ - * /]
`e add-integer-and-float
`(integer literals are parsed as floats in such contexts:)
3 + 7.0
`(integers can be converted with fromIntegral:)
x = 3 `+[::] Int
fromIntegral x + 7.0
`e divmod
7 ``quotRem`` 3
7 ``divMod`` 3
`e integer-division-by-zero
`![Exception: divide by zero]
`e float-division
7 / 3
`e float-division-by-zero
evaluates to Infinity, NaN, or -Infinity, values which do not have literals
`e power
2 ^ 32 `(integer powers only)
2 ^^ 32 `(fractional base, integer powers only)
2 ** 32 `(same-type floating base and exponent)
`e sqrt
sqrt 2
`e sqrt-1
sqrt (-1) `(evaluates to NaN, a value which has no literal)
`e transcendental-functions
exp log

sin cos tan

asin acos atan atan2
`e transcendental-constants
pi

exp 1
`e float-truncation
truncate 3.14
round 3.14
floor 3.14
ceiling 3.14
`e absolute-value-and-signum
abs (-7)
signum (-7)
`e integer-overflow
`.Int wraps; `.Integer is arbitrary length
`e float-overflow
evaluates to Infinity, a value which has no literal
`e arbitrary-length-integer
`(Integer is arbitrary length type, and assumed by default for numbers in contexts where no other type restrictions can be inferred.)
`*let n = 7 `+[::] `.Integer
`(Note that an integer literal is polymorphic, as is a function defined as a single integer literal.)
`*let m = 12
`e arbitrary-length-integer-operators
n + m
n - m
n * m
quot n m `(or) div n m
rem n m `(or) mod n m

n == m
n < m
n > m
n <= m
n >= m
`e rational-type
Ratio Integer
`e rational-construction
`*import Data.Ratio

1 % 7
(1 / 7) `+[::] Rational
`e rational-decomposition
`*import Data.Ratio

numerator (1 % 7)
denominator (1 % 7)
`e complex-type
Complex Double
`e complex-constants

`e complex-operators

`e complex-construction
`*import Data.Complex

1 :+ 2.0
`e complex-decomposition
`*import Data.Complex

realPart (1 :+ 2)
imagPart (1 :+ 2)
phase (1 :+ 2)
magnitude (1 :+ 2)
conjugate (1 :+ 2)
`e random-number-uniform-integer-uniform-float-normal-float
`$[cabal install random]

`*import System.Random

getStdRandom (randomR (0, 99))
getStdRandom (randomR (0.0, 1.0))
none
`e random-seed
`$[cabal install random]

`*import System.Random

setStdGen $ mkStdGen 17

seed `+[<-] getStdGen

setStdGen seed
`e bit-operators
`*import Data.Bits

x = 1 `+[::] Integer
y = 3 `+[::] Integer


shiftL x 4
shiftR x 4
x .&. y
x .|. y
xor x y
complement x
`e binary-octal-and-hex-literals
`(none)
052
0x2a
`e radix-convert-integer-to-and-from-string-with-radix
`*import Data.Char
`*import Numeric
showIntAtBase 7 intToDigit 42 ""
`*case readInt 7 isDigit digitToInt "60" `*of
  [(n, "")] `+[->] n
  _ `+[->] error "Parse failed"
`e string-type
String `(alias for [Char])
`e string-literal
`=["Hello, World!"]
`e newline-in-literal
no
`e literal-escapes
\a \b \f \n \r \t \v \" \& \' \\

\oo... \d... \xh...

Octal, decimal, and hex escapes denote Unicode characters and can contain anywhere from 1 to 7 digits. The max values are \o4177777, \1114111, and \x10ffff. The \& escape does not represent a character, but can separate a numeric backslash escape sequence from a following digit.
`e are-strings-mutable
no
`e format
`*import Text.Printf

printf "foo %s %d %.2f" "bar" 7 3.1415
`e concatenate-strings
"Hello" ++ ", " ++ "World!"
`e replicate-strings
concat $ replicate 80 "-"
replicate 80 '-'
`e translate-case
`*import Data.Char

map toUpper "hello"
map toLower "HELLO"
`e capitalize

`e trim

`e pad

`e number-to-string
"two: " ++ (show 2)
"pi: " ++ (show 3.14)
`e string-to-number
`![raises exception if string doesn't completely parse:]
7 + (read "12")`+[::]Integer
73.9 + (read "0.037")`+[::]Double

`(reads returns a list of (parsed value, remaining string) pairs, or an empty list if parsing fails:)
reads "12" `+[::] [(Int, String)]
`*case reads "12" `*of
  [(x, "")] `+[->] 7 + x
  `+_ `+[->] error "Parse failed"

`(GHC 7.6:)
`*import Text.Read
fmap (7 +) $ readMaybe "12"
fmap (73.9 +) $ readEither "0.037"
`e join
unwords ["do", "re", "mi", "fa"] `(join by spaces)
`*import Data.List
intercalate " " ["do", "re", "mi", "fa"]

`e split
`(on whitespace:)
words "do re mi fa"
`e character-type
`.Char
`e character-literal
`=['h']
`e string-length
length "hello" `(type Int)
`e index-of-substring

`e extract-substring
drop 0 (take 4 "hello")
`e extract-character
"hello" !! 0
`e chr-and-ord
Char.ord 'a'
Char.chr 97
`e to-array-of-characters
`(strings are exactly the same as lists of characters)
`e date-time-type
ClockTime CalendarTime TimeDiff
`e current-date-time
`*import Time

t `+[<-] getClockTime
`e current-unix-epoch
`*import System.Time


getClockTime >>= (`+\(TOD sec `+_) `+[->] return sec)
`e declare-on-heap

`e array-initialization-list
`*import Data.Array
a = listArray (0, 2) [1, 2, 3]
`e array-size
`(returns smallest and largest valid index:)
bounds a
`e array-lookup
n = a ! 0
`e array-update
`(returns updated copy:)
a // [(2, 4)]
`e array-out-of-bounds
`![exception]
`e array-iterate
`(purely functional map:)
fmap `(function) a
`(for monadic iteration, first convert to list with elems or assocs:)
mapM_ (`+\e `+[->] print e) $ elems a
mapM_ (`+\(i,e) `+[->] printf "%d at index %d\n" e i) $ assocs a
`e list-name
[]
`e list-literal
[1, 2, 3]
`e list-size
length [1, 2, 3]
`e empty-list
[]
`e empty-test
`*let list = [1, 2, 3]

list == []
null list
`(pattern matching can often be used to avoid these constructions:)
`*case list `*of
  (x:xs) = x + 1
  [] = error "empty list"
`e cons
1 : [2, 3]
`e head
head [1, 2, 3]
`e tail
tail [1, 2, 3]
`e head-and-tail-of-empty-list
exceptions
`e list-size
length [1, 2, 3]
`e list-lookup
[1, 2, 3] !! 0
`e index-of-element
`*import Data.list

`(Just 1:)
elemIndex 8 [7, 8, 9]

`(Nothing:)
elemIndex 10 [7, 8, 9]
`e update

`e concatenate
[1, 2] ++ [3, 4]
`e concatenate-two-lists-list-of-lists
[1, 2] ++ [3, 4]
concat [[1, 2], [3, 4]]
`e list-replicate
a = replicate 10 Nothing
`e last-and-butlast
last [1, 2, 3]
init [1, 2, 3]
`e take
take 2 [1, 2, 3]
`e drop
drop 2 [1, 2, 3]
`e iterate-over-elements
mapM_ print [1, 2, 3]
forM_ [1, 2, 3] print
`e iterate-over-indices-and-elements
mapM_ (uncurry $ printf "%s at index %d\n") $ zip ["do", "re", "mi", "fa"] [0..]
`e iterate-over-range
forM_ [1..1000000] `(IO monad expression)
`e instantiate-range-as-list
[1..1000000] `(sugar for:) enumFromTo 1 1000000
`e reverse
reverse [1, 2, 3]
`e sort
`*import Data.List
sort [1, 3, 2, 4]
sortBy (`+\x y `+[->] x ``compare`` y) [1, 3, 2, 4]
sortBy (`+\x y `+[->] y ``compare`` x) [1, 3, 2, 4]

`*import Data.Ord
sortBy (comparing id) [1, 3, 2, 4]
sortBy (comparing Down) [1, 3, 2, 4] `(Down is newtype that reverses orderings)
`e dedupe
`*import Data.List
a = [1, 2, 2, 3]
nub a
`e map
map (`+\x `+[->] x * x) [1, 2, 3]
`(or use list comprehension:)
[x * x | x `+[<-] [1, 2, 3]]
`e filter
filter (`+\x `+[->] x > 2) [1, 2, 3]
`(or use list comprehension:)
[x | x `+[<-] [1, 2, 3], x > 2]
`e fold-from-left
foldl (+) 0 [1, 2, 3]
foldl' (+) 0 [1, 2, 3] `(strict variant)
`e fold-from-right
foldr (-) 0 [1, 2, 3]
`e membership
elem 3 [1, 2, 3]
`e universal-test
all (`+\x `+[->] x > 2) [1, 2, 3]
`e existential-test
any (`+\x `+[->] x > 2) [1, 2, 3]
`e intersection
`*import Data.List
intersect [1, 2] [2, 3, 4]
`e union
`*import Data.List
union [1, 2] [2, 3, 4]
`e relative-complement-symmetric-difference
`*import Data.List
[1, 2] \\ [2, 3, 4]
`e min-and-max-element
`*import Data.List
minimum [1, 2, 3]
maximum [1, 2, 3]
`e zip-lists
-- list of tuples:

zip [1, 2, 3] ['a', 'b', 'c']
`e tuple
(1, "hello", `=True)
`e tuple-element-access
(`+\(a, `+_, `+_) `+[->] a) (1, "hello", `=True)
`e pair-element-access
fst (12, "December")

snd (12, "December")
`e map-access
`*import `*qualified Data.Map `*as M
m M.! k
`e map-size
M.length m
`e map-remove-element
M.delete k m `(returns new map)
`e map-literal
`(none, use fromList:)
M.fromList [('t', 1), ('f', 0)]
`e is-key-present
M.delete k m `(returns new map)
`e define-function
average a b = (a + b) / 2.0
`e invoke-function
`(4.5, as function application has highest precedence:)
average 1 2 + 3

`(3.0:)
average 1 (2 + 3)
average 1 $ 2 + 3
`e define-function-with-block-body

`e named-parameters
`e named-parameter-default-value
`e piecewise-defined-function
to_s Red = "red"
to_s Green = "green"
to_s Blue = "blue"
`e recursive-function
range a b = `*if a > b `*then [] `*else a : range (a+1) b
`e mutually-recursive-functions

`e lambda
`+\x y `+[->] (x+y) / 2.0
`e infix-operator-in-prefix-position
( * ) 3 4
`e function-in-infix-position
add x y = x + y

3 ``add`` 4
`e currying
plus2 = add 2
plus2 = (+) 2
`(infix operators allow partial application by supplying one operand on either side:)
half = (/ 2)
twoOver = (2 /)
`e composition
f x = x + 2
g x = x * 3

(f . g) 4
`e function-composition-operator
double x = 2 * x
quadruple x = double . double
`e lazy-evaluation
`(lazy evaluation is default:)
arg1 x y = x
arg1 7 (error "bam!")
`e strict-evaluation
arg1 x y = seq y x
arg1 7 (error "bam!")
`e if
`*if x > 0
  `*then putStrLn "pos"
  `*else return ()
`e control-structure-keywords
`*if x > 0
  `*then putStrLn "pos"
  `*else `*if x < 0
    `*then putStrLn "neg"
    `*else putStrLn "zero"
`e sequencing
`*do
  putStrLn "one"
  putStrLn "two"
  putStrLn "three"
`(sugar for:)
putStrLn "one" >> putStrLn "two" >> putStrLn "three"
`e while

`e for

`e for-in-reverse

`e list-iteration

`e loop

`e raise-error
error "bam!"
`e handle-error
`*import System.IO.Error
dangerous `+[::] IO ()
dangerous = error "bam!"

handler `+[::] IOError `+[->] IO ()
handler e = putStrLn "Caught error!"

dangerous ``catch`` handler
`e type-of-exceptions
IOError
`e user-defined-exception

`e standard-exceptions

`e assert

`e standard-file-handles
`*import System.IO

stdin, stdout, stderr `+[::] Handle
`e read-line-from-stdin
line `+[<-] getLine
`e end-of-file-behavior
when last data is returned, hIsEOF will return True. Reading after end-of-file throws an exception.
`e chomp

`e write-line-to-stdout
putStrLn "lorem ipsum"
`e printf
`*import Text.Printf

printf :: PrintfType r => String -> r
`(printf can be an IO action or a string, taking any number of format arguments, chosen by type-inference magic)
`e open-file-for-reading
`*import System.IO

f `+[<-] openFile "/etc/hosts" ReadMode
`e open-file-for-writing
`*import System.IO

f `+[<-] openFile "/tmp/test" WriteMode
`e open-file-for-appending
`*import System.IO

f `+[<-] openFile "/tmp/err.log" AppendMode
`e close-file
`*import System.IO

hClose f
`e i-o-errors

`e read-line
line `+[<-] hGetLine f
`e iterate-over-file-by-line
readAndPrintLines h = `*do
  eof `+[<-] hIsEOF h
  `*if eof
    `*then return ()
    `*else `*do
      line `+[<-] hGetLine h
      putStrLn line
      readAndPrintLines h

main = `*do
  h `+[<-] openFile "/etc/passwd" ReadMode
  readAndPrintLines h

`e read-file-into-array-of-strings

`e read-file-into-string
readFile "/etc/hosts"

f `+[<-] openFile "/etc/hosts" ReadMode
hGetContents f
`e write-string
hPutStr f "hello world"

`e write-line
s = "hello out\n"
f = "/tmp/test-haskell"
main = writeFile f s
`e flush-file-handle
hFlush f
`e end-of-file-test

`e get-and-set-filehandle-position

`e file-exists-test-regular-file-test
`*import System

Directory.doesFileExist "/etc/hosts"

`*import Control.Monad
`*import System.Posix.Files

liftM isRegularFile (getFileStatus "/etc/hosts")
`e file-size
`*import Control.Monad

`*import System.Posix.Files


liftM fileSize (getFileStatus "/etc/hosts")
`e is-file-readable-writable-executable
`*import Control.Monad

liftM readable
  (getPermissions "/etc/hosts")
liftM writable
  (getPermissions "/etc/hosts")
liftM executable
  (getPermissions "/etc/hosts")
`e set-file-permissions
`*import System.Posix.Files

setFileMode `=["/tmp/foo"] ownerModes
setFileMode `=["/tmp/foo"] groupReadMode
setFileMode `=["/tmp/foo"] groupExecuteMode
setFileMode `=["/tmp/foo"] otherReadMode
setFileMode `=["/tmp/foo"] otherExecuteMode
`e copy-file-remove-file-rename-file
`*import System.Directory

copyFile `=["/tmp/foo"] `=["/tmp/bar"]
removeFile `=["/tmp/foo"]
renameFile `=["/tmp/bar"] `=["/tmp/foo"]
`e create-symlink-symlink-test-readlink
`*import System.Posix.Files

createSymbolicLink "/etc/hosts" "/tmp/hosts"
??
readSymbolicLink "/tmp/hosts"
`e generate-unused-file-name

`e build-pathname
`*import System.FilePath ((</>))

`*let path = "/etc" </> "hosts"
`e dirname-and-basename
`*import System.FilePath

takeFileName "/etc/hosts"
takeDirectory "/etc/hosts"
`e iterate-over-directory-by-file
`*import System

`(returns IO [FilePath])
Directory.getDirectoryContents "/etc"
`e make-directory
`*import System.Directory

createDirectoryIfMissing True
  "/tmp/foo/bar"
`e remove-empty-directory
`*import System.Directory

removeDirectory "/tmp/foodir"
`e remove-directory-and-contents
`*import System.Directory

removeDirectoryRecursive "/tmp/foodir"
`e directory-test
`*import System

Directory.doesDirectoryExist "/tmp"
`e system-temporary-file-directory

`e command-line-arguments
`*import System


printArgs args = `*do
  `*if length args == 0
    `*then return ()
    `*else `*do
      putStrLn (head args)
      printArgs (tail args)

main = `*do
  a `+[<-] getArgs
  printArgs a
`e program-name
`*import System


s `+[<-] getProgName
`e getopt

`e get-and-set-environment-variable
`*import System.Posix.Env

s `+[<-] getEnv "HOME"
putEnv "PATH=/bin"
`e get-pid-parent-pid
`*import System.Posix.Process

pid `+[<-] getProcessID
ppid `+[<-] getParentProcessID
`e get-user-id-and-name
`*import System.Posix.User

uid `+[<-] getRealUserID
username `+[<-] getLoginName
`e exit
`*import System.Exit

exitWith ExitSuccess

`(to return nonzero status:)
exitWith (ExitFailure 1)
`e set-signal-handler

`e external-command
`*import System.Cmd

rawSystem "ls" ["-l", "/tmp"]
`e escaped-external-command

`e backticks

`e namespace-example
`(Foo/Bar.hs)
`*module Foo.Bar `*where
  data Baz = Baz
  say Baz = putStrLn "hello"

`(Main.hs)
`*module Main `*where
`*import Foo.Bar

baz = Baz
main = say baz

`(to compile and run)
`$[ghc -c Foo/Bar.hs]
`$[ghc Main.hs]
`$[./Main]
hello
`e namespaces
values, constructors, type variables, type constructors, type classes, modules
`e file-name-restrictions
module Foo.Bar must be in Foo/Bar.hs
`e namespace
`*import Data.Bytestring
`e namespace-creation

`e namespace-alias
`*import `*qualified Data.Bytestring `*as B
`e namespace-separator
.
`e subnamespace

`e package-manager-setup

`e package-manager-search-install-list-installed
`$[cabal list parsec]
`$[cabal install parsec]
`$[cabal list --installed]
`e compile-app-using-package

`e type-synonym
`*type Name = String
`e sum-type
`*data Color = Red | Green | Blue `*deriving (Eq, Ord, Show)
col = Red

print col `(Red)
col < Green `(True)
`e tuple-product-type-with-one-field
`*data SpecialIntType = SpecialInt `.Integer
n = SpecialInt 7

`*newtype SpecialIntType = SpecialInt { runSpecialInt :: `.Integer }
n = SpecialInt 7
`e tuple-product-type-with-two-fields
`*data IntPairType = IntPair Integer Integer

p = IntPair 7 11
`e record-product-type
`*data CustomerType = Customer {
  customerId `+[::] Integer,
  name `+[::] String,
  address `+[::] String
}
`e record-product-type-literal
Customer {
  customerId=7,
  name="John",
  address="Topeka, KS"
}
`e generic-type
`*data TwosomeType a b = Twosome a b

p = Twosome ("pi", 3.14)
`e recursive-type
`*data BinaryTree = Leaf Integer | Tree BinaryTree BinaryTree
`e pattern-match-sum-type
c = Red

`*case c `*of Red `+[->] "red"
  Green `+[->] "green"
  Blue `+[->] "blue"
`e pattern-match-product-type

`e pattern-match-guard
none, use `*if or piecewise function definition
`e pattern-match-catchall
c = Green
`*case c `*of Red `+[->] "red"; `+_ `+[->] "not red"
`e define-class

`e create-object

`e invoke-method

`e field-access

`e overload-function

`e inheritance

`e invoke-repl
$ ghci
`e repl-limitations
Must use `*let to define values and functions; when defining functions with multiple equations the equations must be separated by semicolons; the clauses of case/of statements must be separated by semicolons; it is not possible to define data types.
`e repl-last-value
it
`e help
:?
`e quit

`e inspect-type
`*let a = 3
:type a
`e inspect-namespace

`e load-source-file
:edit hello.hs
:load hello
`e load-package

`e search-path

`e set-search-path-on-command-line

