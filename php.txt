`e versions-used
5.4; 5.5
`e show-version
`$[php --version]
`e implicit-prologue
`e interpreter
`$[php -f foo.php]
`e repl
`$[php -a]
`e command-line-program
`$[php -r 'echo "hi\n";']
`e block-delimiters
{}
`e statement-terminator
;

statements must be semicolon terminated inside {}
`e source-code-encoding
`e end-of-line-comment
// comment
# comment
`e multiple-line-comment
/* comment line
another line */
`e local-variable
`c[in function body:]
$v = `=NULL;
$a = [];
$d = [];
$x = 1;
`.list($y, $z) = [2, 3];
`e regions-which-define-lexical-scope
top level:
  function or method body
nestable (with use clause):
  anonymous function body
`e global-variable
`*list($g1, $g2) = [7, 8];
`*function swap_globals() {
  `*global $g1, $g2;
  `*list($g1, $g2) = [$g2, $g1];
}
`e constant
`*define("PI", 3.14);
`e assignment
$v = 1;
`e parallel-assignment
`*list($x, $y, $z) = [1 ,2, 3];
`c[3 is discarded:]
`*list($x, $y) = [1, 2, 3];
`c[$z set to NULL:]
`*list($x, $y, $z) = [1, 2];
`e swap
`*list($x, $y) = [$y, $x];
`e compound-assignment-arithmetic-string-logical-bit
+= -= *= `c[none] /= %= **=
.= `c[none]
&= |= `c[none]
<<= >>= &= |= ^=
`e increment-and-decrement
$x = 1;
$y = ++$x;
$z = --$y;
`e null
`=NULL `c[case insensitive]
`e null-test
`*is_null($v)
! `*isset($v)
`e uninitialized-local-variable
`=NULL
`e uninitialized-global-variable
`=NULL
`e conditional-expression
$x > 0 ? $x : -$x
`e true-and-false
`=TRUE `=FALSE `c[case insensitive]
`e falsehoods
`=FALSE `=NULL 0 0.0 "" "0" []
`e logical-operators
&& || !
`c[lower precedence:]
`*and `*or `*xor
`e relational-operators
== != or <> > < >= <=
`c[no conversion:] === !==
`e compare-strings
== != or <> > < >= <=
`c[no conversion:] === !==
`e min-and-max
`.min(1, 2, 3)
`.max(1, 2, 3)
$a = [1, 2, 3]
`.min($a)
`.max($a)
`e three-value-comparison
`e arithmetic-operators
+ - * / `c[none] %
`e integer-division
(`*int)(13 / 5)
`e divmod
`e integer-division-by-zero
returns `=FALSE with warning
`e float-division
13 / 5
`e float-division-by-zero
returns `=FALSE with warning
`e power
pow(2, 32)
`e sqrt
sqrt(2)
`e sqrt-1
NaN
`e transcendental-functions
exp log sin cos tan asin acos atan atan2
`e transcendental-constants
M_PI M_E
`e float-truncation
(`*int)$x
`.round($x)
`.ceil($x)
`.floor($x)
`e absolute-value-and-signum
`.abs($x)
`e integer-overflow
converted to float
`e float-overflow
INF
`e rational-construction
`e rational-decomposition
`e complex-construction
`e complex-decomposition-real-and-imaginary-component-argument-absolute-value-conjugate
`e random-number-uniform-integer-uniform-float-normal-float
`.rand(0,99)
`.lcg_value()
`c[none]
`e random-seed
`.srand(17);
`c[none]
`e bit-operators
<< >> & | ^ ~
`e binary-octal-and-hex-literals
`=0b101010
`=052
`=0x2a
`e radix-convert-integer-to-and-from-string-with-radix
`.base_convert("42", 10, 7);
`.base_convert("60", 7, 10);
`e string-type
string
`e string-literal
`=["don't say `%[\"]no`%[\"]"]
`=['don`%[\']t say "no"']
`e newline-in-literal
`=['first line
second line']

`=["first line
second line"]
`e literal-escapes
double quoted:

\f \n \r \t \v \xhh \$ \" \\ \ooo

single quoted:

\' \\
`e custom-delimiters
`e here-document
$word = "amet";


$s = <<<EOF
lorem ipsum
dolor sit `%[$word]
EOF;
`e variable-interpolation
$count = 3;
$item = "ball";
`*echo "`%[$count] `%[${item}]s`%[\n]";
`e expression-interpolation
`e format
$fmt = "lorem %s %d %f";
`.sprintf($fmt, "ipsum", 13, 3.7);
`e are-strings-mutable
$s = "bar";
$s2 = $s;
`c[sets s to "baz"; s2 is unchanged:]
$s[2] = "z";
`e copy-string
$s2 = $s;
`e concatenate-strings
$s = "Hello, ";
$s2 = $s . "World!";
`e replicate-string
$hbar = `.str_repeat("-", 80);
`e translate-case
`.strtoupper("lorem")
`.strtolower("LOREM")
`e capitalize
`.ucfirst("lorem")
`.ucwords("lorem ipsum")
`e trim
`.trim(" lorem ")
`.ltrim(" lorem")
`.rtrim("lorem ")
`e pad
`.str_pad("lorem", 10)
`.str_pad("lorem", 10, " ", STR_PAD_LEFT)
`.str_pad("lorem", 10, " ", STR_PAD_BOTH)
`e number-to-string
"value: " . 8
`e string-to-number
7 + "12"
73.9 + ".037"
`e join
$a = ["do", "re", "mi", "fa"];

`.implode(" ", $a)
`e split
`.explode(" ", "do re mi fa")
`e split-in-two
`.preg_split('/\s+/', "do re mi fa", 2)
`e split-and-keep-delimiters
`.preg_split('/(\s+)/', "do re mi fa",
  `=NULL, `=PREG_SPLIT_DELIM_CAPTURE)
`e string-length
`.strlen("lorem")
`e index-of-substring
`c[returns FALSE if not found, which must be tested for with === since it coerces to 0:]
`.strpos("do re re", "re")
`.strrpos("do re re", "re")
`e extract-substring
`.substr("lorem ipsum", 6, 5)
`c[none]
`c[none]
`e extract-character
`c[syntax error to use index notation directly on string literal:]
$s = "lorem ipsum";
$s[6];
`e chr-and-ord
`.chr(65)
`.ord("A")
`e to-array-of-characters
`.str_split("abcd")
`e translate-characters
$ins = `.implode(`.range("a", "z"));
$outs = `.substr($ins, 13, 13) .
  `.substr($ins, 0, 13);

`.strtr("hello", $ins, $outs)
`e delete-characters
$vowels = `.str_split("aeiou");

$s = "disemvowel me";
$s = `.str_replace($vowels, "", $s);
`e squeeze-characters
$s = "too  much  space";

$s = = `.preg_replace('/(\s)+/', '\1', $s);
`e literal-custom-delimited-literal
'/lorem|ipsum/'
'(/etc/hosts)'
`e character-class-abbreviations
. \d \D \h \H \s \S \v \V \w \W
`e anchors
^ $ \A \b \B \z \Z
`e match-test
`*if (`.preg_match('/1999/', $s)) {
  `*echo "party!\n";

}
`e case-insensitive-match-test
`.preg_match('/lorem/i', "Lorem")
`e modifiers
e i m s x
`e substitution
$s = "do re mi mi mi";

$s = `.preg_replace('/mi/', "ma", $s);
`e match-prematch-postmatch
none
`e group-capture
$s = "2010-06-03";

$rx = '/(\d{4})-(\d{2})-(\d{2})/';

`.preg_match($rx, $s, $m);

list($_, $yr, $mo, $dy) = $m;
`e named-group-capture
$s = "foo.txt";

$rx = '/^(?P<file>.+)\.(?P<suffix>.+)$/';

`.preg_match($rx, $s, $m);


$m["file"]
$m["suffix"]
`e scan
$s = "dolor sit amet";

`.preg_match_all('/\w+/', $s, $m);

$a = $m[0];
`e backreference-in-match-and-substitution
`.preg_match('/(\w+) \1/', "do do")

$s = "do re";
$rx = '/(\w+) (\w+)/';

$s = `.preg_replace($rx, '\2 \1', $s);
`e recursive-regex
'/\(([^()]*|($R))\)/'
`e date-time-type
DateTime
`e current-date-time
$t = new DateTime("now");

$utc_tmz = new DateTimeZone("UTC");

$utc = new DateTime("now", $utc_tmz);
`e to-unix-epoch-from-unix-epoch
$epoch = $t->getTimestamp();

$t2 = new DateTime();

$t2->setTimestamp(1304442000);
`e current-unix-epoch
$epoch = time();
`e strftime
strftime("%Y-%m-%d %H:%M:%S", $epoch);

date("Y-m-d H:i:s", $epoch);

$t->format("Y-m-d H:i:s");
`e default-format-example
no default string representation
`e strptime
$fmt = "Y-m-d H:i:s";

$s = "2011-05-03 10:00:00";

$t = DateTime::createFromFormat($fmt,
  $s);
`e parse-date-w-o-format
$epoch = strtotime("July 7, 1999");
`e date-subtraction
DateInterval object if diff method used:

$fmt = "Y-m-d H:i:s";

$s = "2011-05-03 10:00:00";

$then = DateTime::createFromFormat($fmt, $s);

$now = new DateTime("now");

$interval = $now->diff($then);
`e add-duration
$now = new DateTime("now");

$now->add(new DateInterval("PT10M3S");
`e local-timezone
DateTime objects can be instantiated without specifying the timezone if a default is set:

$s = "America/Los_Angeles";

date_default_timezone_set($s);
`e arbitrary-timezone

`e timezone-name-offset-from-utc-is-daylight-savings
$tmz = date_timezone_get($t);

timezone_name_get($tmz);

date_offset_get($t) / 3600;

$t->format("I");
`e microseconds
list($frac, $sec) = explode(" ",
  microtime());

$usec = $frac * 1000 * 1000;
`e sleep
`c[a float argument will be truncated to an integer:]

sleep(1);
`e timeout
use set_time_limit to limit execution time of the entire script; use stream_set_timeout to limit time spent reading from a stream opened with fopen or fsockopen
`e list-name
array
`e list-literal
$a = [1, 2, 3, 4];
`c[older syntax:]
$a = `.array(1, 2, 3, 4);
`e quote-words
`e list-size
`.count($a)
`e empty-test
`+!$a
`e list-lookup
$a[0]
`c[PHP uses the same type for arrays and dictionaries; indices can be negative integers or strings]
`e list-update
$a[0] = "lorem";
`e list-out-of-bounds
$a = [];
`c[evaluates as NULL:]
$a[10];
`c[increases array size to one:]
$a[10] = "lorem";
`e index-of-element
$a = ["x", "y", "z", "w"];
$i = `.array_search("y", $a);
`e slice
`c[select 3rd and 4th elements:]
`c[none]
`.array_slice($a, 2, 2)
`e drop
`.array_slice($a, 1)
`e manipulate-back
$a = [6, 7, 8];

`.array_push($a, 9);
$a[] = 9; `c[same as array_push]

array_pop($a);
`e manipulate-front
$a = [6, 7, 8];

`.array_unshift($a, 5);

`.array_shift($a);
`e concatenate
$a = [1, 2, 3];

$a2 = `.array_merge($a, [4, 5, 6]);

$a = `.array_merge($a, [4, 5, 6]);
`e list-replicate

`e list-copy
$a = [1, 2, [3, 4]];

$a2 =& $a;
`c[none]

$a4 = $a;
`e arrays-as-function-arguments
parameter contains deep copy
`e iterate-over-elements
`*foreach ([1, 2, 3] `*as $i) {
  `*echo "$i\n";
}
`e iterate-over-indices-and-elements
$a = ["do", "re", "mi" "fa"];
`*foreach ($a `*as $i => $s) {
  `*echo "$s at index $i\n";

}
`e iterate-over-range
not space efficient; use C-style for loop
`e instantiate-range-as-list
$a = `.range(1, 10);
`e reverse
$a = [1, 2, 3];

`.array_reverse($a);

$a = `.array_reverse($a);
`e sort
$a = ["b", "A", "a", "B"];

`c[none]

sort($a);
`c[none, but usort sorts in place]
`e dedupe
$a = [1, 2, 2, 3];

$a2 = `.array_unique($a);

$a = `.array_unique($a);
`e membership
`.in_array(7, $a)
`e intersection
$a = [1, 2];
$b = [2, 3, 4]

`.array_intersect($a, $b)
`e union
$a1 = [1, 2];
$a2 = [2, 3, 4];

`.array_unique(`.array_merge($a1, $a2))
`e relative-complement-symmetric-difference
$a1 = [1, 2, 3];
$a2 = [2];

`.array_values(`.array_diff($a1, $a2))
`c[none]
`e map
array_map(`*function ($x) {
    `*return $x * $x;
  }, [1, 2, 3])
`e filter
array_filter([1, 2, 3],
  `*function ($x) {
    `*return $x>1;
  })
`e fold-from-left
array_reduce([1, 2, 3],
  `*function($x,$y) {
    `*return $x + $y;
  }, 0)
`e universal-test
`c[use array_filter]
`e existential-test
`c[use array_filter]
`e shuffle-and-sample
$a = [1, 2, 3, 4];

shuffle($a);

array_rand($a, 2)
`e zip
`c[array of 3 pairs:]

$a = array_map(NULL,
  [1, 2, 3],
  ["a", "b", "c"]);
`e map-literal
$d = ["t" => 1, "f" => 0];

`c[older syntax:]
$d = array("t" => 1, "f" => 0);
`e map-size
count($d)
`e map-lookup
$d["t"]
`e map-out-of-bounds
$d = [];
evaluates as NULL:

$d["lorem"];
adds key/value pair:

$d["lorem"] = "ipsum";
`e is-key-present
array_key_exists("y", $d);
`e delete-entry
$d = [1 => "t", 0 => "f"];

unset($d[1]);
`e from-array-of-pairs-from-even-length-array

`e merge
$d1 = ["a"=>1, "b"=>2];

$d2 = ["b"=>3, "c"=>4];

$d1 = array_merge($d1, $d2);
`e invert
$to_num = ["t"=>1, "f"=>0];

$to_let = array_flip($to_num);
`e iteration
`*foreach ($d `*as $k => $v) {
  `c[code]
}
`e keys-and-values-as-arrays
`.array_keys($d)
`.array_values($d)
`e sort-by-values
`.asort($d);

`*foreach ($d `*as $k => $v) {
  `*print "$k: $v\n";
}
`e default-value-computed-value
$counts = [];

$counts['foo'] += 1;

extend ArrayObject for computed values and defaults other than zero or empty string.
`e define-function
`*function add3($x1, $x2, $x3)
{
  `*return $x1 + $x2 + $x3;
}
`e invoke-function
add3(1, 2, 3);

`c[function names are case insensitive:]

ADD3(1, 2, 3);
`e apply-function-to-array
$a = [1, 2, 3];


call_user_func_array("add3", $a);
`e missing-argument-behavior
set to `=NULL with warning
`e default-argument
`*function my_log($x, $base=10)
{
  `*return log($x) / log($base);
}

my_log(42);
my_log(42, M_E);
`e variable-number-of-arguments
`*function first_and_last() {

  $arg_cnt = func_num_args();

  `*if ($arg_cnt >= 1) {
    $n = func_get_arg(0);
    `*echo "first: " . $n . "\n";
  }

  `*if ($arg_cnt >= 2) {
    $a = func_get_args();
    $n = $a[$arg_cnt-1];
    `*echo "last: " . $n . "\n";
  }
}
`e named-parameters
`e pass-number-or-string-by-reference
`*function foo(&$x, &$y) {
  $x += 1;
  $y .= "ly";
}

$n = 7;
$s = "hard";
foo($n, $s);
`e pass-array-or-dictionary-by-reference
`*function foo(&$x, &$y)
{
  $x[2] = 5;
  $y["f"] = -1;
}

$a = [1, 2, 3];
$d = ["t"=>1, "f"=>0];
foo($a, $d);
`e return-value
`*return arg or NULL
`e multiple-return-values
`*function first_and_second(&$a) {
  `*return [$a[0], $a[1]];
}

$a = [1, 2, 3];

`*list($x, $y) =
  first_and_second($a);
`e lambda
$sqr = `*function ($x) {
  `*return $x * $x;
};
`e lambda-invocation
$sqr(2)
`e function-as-value
$func = "add";
`e function-with-private-state
`*function counter()
{
  `*static $i = 0;
  `*return ++$i;
}

`*echo counter();
`e closure
`*function make_counter()

{
  $i = 0;
  `*return `*function () use (&$i) {
    `*return ++$i;
  };

}


$nays = make_counter();
`*echo $nays();
`e generator
`c[PHP 5.5:]
`*function make_counter() {
  $i = 0;
  `*while (1) {
    yield ++$i;
  }

}


$nays = make_counter();
`c[does not return a value:]

$nays->next();
`c[runs generator if generator has not yet yielded:]
`*echo $nays->current();
`e decorator

`e operator-as-function

`e if
`*if ( 0 == $n ) {
  `*echo "no hits\n";

} elseif ( 1 == $n ) {
  `*echo "one hit\n";

} else {
  `*echo "$n hits\n";

}
`e switch
switch ($n) {
case 0:
  `*echo "no hits\n";
  break;
case 1:
  `*echo "one hit\n";
  break;
default:
  `*echo "$n hits\n";

}
`e while
`*while ( $i < 100 ) { $i++; }
`e c-style-for
`*for ($i = 1; $i <= 10; $i++) {
  `*echo "$i\n";

}
`e break-continue-redo
break continue none
`e control-structure-keywords
case default do else elseif `*for `*foreach goto `*if switch `*while
`e what-do-does
starts body of a do-while loop, a loop which checks the condition after the body is executed
`e statement-modifiers
none
`e raise-exception
throw new Exception("bad arg");
`e re-raise-exception

`e catch-exception
try {
  risky();

} catch (Exception $e) {
  `*echo "risky failed: ",
    $e->getMessage(), "\n";

}
`e global-variable-for-last-exception
none
`e define-exception
class Bam extends Exception

{
  `*function __construct()
  {
    parent::__construct("bam!");
  }

}
`e catch-exception-by-type
try {
  throw new Bam;

} catch (Bam $e) {
  `*echo $e->getMessage(), "\n";

}
`e finally
none
`e start-thread
none
`e wait-on-thread

`e standard-file-handles
only set by CLI; not set when reading script from stdin:
STDIN STDOUT STDERR
`e read-line-from-stdin
$line = fgets(STDIN);
`e end-of-file-behavior
returns string without newline or FALSE
`e chomp
chop($line);
`e write-line-to-stdout
`*echo "Hello, World!\n";
`e printf
printf("%.2f\n", M_PI);
`e open-file-for-reading
$f = fopen("/etc/hosts", "r");
`e open-file-for-writing
$f = fopen("/tmp/test", "w");
`e set-file-handle-encoding

`e open-file-for-appending
$f = fopen("/tmp/test", "a");
`e close-file
fclose($f);
`e close-file-implicitly
none
`e i-o-error
return false value and write warning to stderr
`e encoding-error

`e read-line
$line = fgets($f);
`e iterate-over-file-by-line
`*while (!feof($f)) {
  $line = fgets($f);
  `*echo $line;

}
`e read-file-into-array-of-strings
$a = file("/etc/hosts");
`e read-file-into-string
$s = file_get_contents(
  "/etc/hosts");
`e write-string
fwrite($f, "lorem ipsum");
`e write-line
fwrite($f, "lorem ipsum");
`e flush-file-handle
CLI output isn't buffered

fflush($f);
`e end-of-file-test
feof($f)
`e get-and-set-file-handle-position
ftell($f)

fseek($f, 0);
`e open-temporary-file
$f = tmpfile();


fwrite($f, "lorem ipsum\n");

`c[no way to get file name]

fclose($f);

file is removed when file handle is closed
`e in-memory-file
$meg = 1024 * 1024;

$mem = "php://temp/maxmemory:$meg";

$f = fopen($mem, "r+");

fputs($f, "lorem ipsum");

rewind($f);

$s = fread($f, $meg);
`e file-exists-test-regular-test
file_exists("/etc/hosts")

is_file("/etc/hosts")
`e file-size
filesize("/etc/hosts")
`e is-file-readable-writable-executable
is_readable("/etc/hosts")

is_writable("/etc/hosts")

is_executable("/etc/hosts")
`e set-file-permissions
chmod("/tmp/foo", 0755);
`e last-modification-time
`c[unix epoch:]

$t = stat('/etc/passwd')['mtime'];

`c[DateTime object:]

$t2 = new DateTime('UTC');

$t2->setTimestamp($t);
`e copy-file-remove-file-rename-file
copy("/tmp/foo", "/tmp/bar");

unlink("/tmp/foo");

rename("/tmp/bar", "/tmp/foo");
`e create-symlink-symlink-test-readlink
symlink("/etc/hosts", "/tmp/hosts");

is_link("/etc/hosts")

readlink("/tmp/hosts")
`e generate-unused-file-name
$path = tempnam("/tmp", "foo");

$f = fopen($path, "w");
`e parse-csv
$f = fopen("no-header.csv", "r");
`*while (($row = fgetcsv($f)) != FALSE) {
  `*echo implode("\t", $row) . "\n";

}
`e generate-csv

`e json-generate-parse
$a = array("t" => 1, "f" => 0);

$s = json_encode($a);

$d = json_decode($s, TRUE);
`e generate-xml
$xml = "<a></a>";

$sxe = new SimpleXMLElement($xml);

$b = $sxe->addChild("b", "foo");

$b->addAttribute("id", "123");

`c[<a><b id="123">foo</b></a>:]
`*echo $sxe->asXML();
`e parse-xml-all-nodes-matching-xpath-query-first-node-matching-xpath-query
$xml = "<a><b><c ref='3'>foo</c></b></a>";

`c[returns NULL and emits warning if not well-formed:]

$doc = simplexml_load_string($xml);


$nodes = $doc->xpath("/a/b/c");
`*echo count($nodes);
`*echo $nodes[0];


$node = $nodes[0];
`*echo $node;
`*echo $node["ref"];
`e parse-html
$html = file_get_contents("foo.html");

$doc = new DOMDocument;

$doc->loadHTML($html);

$xpath = new DOMXPath($doc);


$nodes = $xpath->query("//a/@href");
`*foreach($nodes `*as $href) {
  `*echo $href->nodeValue;

}
`e working-directory
$old_dir = getcwd();


chdir("/tmp");
`e build-pathname
"/etc" . DIRECTORY_SEPARATOR . "hosts"
`e dirname-and-basename
dirname("/etc/hosts")

basename("/etc/hosts")
`e absolute-pathname-and-tilde-expansion
`c[file must exist; symbolic links are resolved:]

realpath("foo")

realpath("/foo")

realpath("../foo")

realpath("./foo")
`c[no function for tilde expansion]
`e iterate-over-directory-by-file
`*if ($dir = opendir("/etc")) {
  `*while ($file = readdir($dir)) {
    `*echo "$file\n";
  }
  closedir($dir);

}
`e glob-paths
`*foreach (glob("/etc/*") `*as $file) {
  `*echo "$file\n";

}
`e make-directory
mkdir("/tmp/foo/bar", 0755, TRUE);
`e recursive-copy
none
`e remove-empty-directory
rmdir("/tmp/foodir");
`e remove-directory-and-contents
none
`e directory-test
is_dir("/tmp")
`e generate-unused-directory

`e system-temporary-file-directory
sys_get_temp_dir()
`e command-line-arguments-and-script-name
$argv

$_SERVER["SCRIPT_NAME"]
`e get-and-set-environment-variable
getenv("HOME")


putenv("PATH=/bin");
`e get-pid-parent-pid
posix_getpid()

posix_getppid()
`e get-user-id-and-name
$uid = posix_getuid();

$uinfo = posix_getpwuid($uid);

$username = $uinfo["name"];
`e exit
exit(0);
`e set-signal-handler

`e executable-test
is_executable("/bin/ls")
`e external-command
system("ls -l /tmp", $retval);
`*if ($retval) {
  throw new Exception("ls failed");

}
`e escaped-external-command
$path = chop(fgets(STDIN));

$safe = escapeshellarg($path);

system("ls -l " . $safe, $retval);
`*if ($retval) {
  throw new Exception("ls failed");

}
`e backticks
$files = ``ls -l /tmp``;
`e command-line-options-boolean-option-option-with-argument-usage
$usage = "usage: " .
  $_SERVER["SCRIPT_NAME"] .
  " [-f FILE] [-v] [ARG ...]\n";


$opts = getopt("f:hv",
  array("file:", "help", "verbose"));

`*if (array_key_exists("h", $opts) ||
    array_key_exists("help", $opts)) {
  `*echo $usage;
  exit(0);

}


$file = $opts["f"] ? $opts["f"] :
  $opts["file"];

`*if (array_key_exists("v", $opts) ||
    array_key_exists("verbose", $opts)) {
  $verbose = TRUE;

}

`c[Processing stops at first positional argument. Unrecognized options are ignored. An option declared to have an argument is ignored if the argument is not provided on the command line. getopt(] does not modify $argv or provide means to identify positional arguments.)
`e load-library
require_once("foo.php");
`e load-library-in-subdirectory
require_once('foo/bar.php');
`e hot-patch
require("foo.php");
`e load-error
require and require_once raise fatal error if library not found; include and include_once emit warnings
`e main-routine-in-library
none
`e library-path
$libpath = ini_get("include_path");


ini_set("include_path",
  $libpath . ":/some/path");
`e library-path-environment-variable
none
`e library-path-command-line-option
none
`e simple-global-identifiers
variables defined outside of functions or with global keyword
`e multiple-label-identifiers
classes, interfaces, functions, and constants
`e label-separator
\Foo\Bar\baz();
`e root-namespace-definition
\foo
`e declare-namespace
namespace Foo;
`e child-namespace-declaration
namespace Foo\Bar;
`e namespace-alias
use Foo `*as Fu;
`e unqualified-import-of-namespace
none, but a long module name can be shortened
`e unqualified-import-of-all-subnamespaces

`e unqualified-import-of-definitions
only class names can be imported
`e list-installed-packages-install-a-package
$ pear list

$ pear install Math_BigInteger
`e package-specification-format

`e define-class
class Int

{
  public $value;
  `*function __construct($int=0)
  {
    $this->value = $int;
  }

}
`e create-object
$i = new Int();

$i2 = new Int(7);
`e instance-variable-visibility
visibility must be declared
`e get-and-set-instance-variable
$v = $i->value;

$i->value = $v + 1;
`e define-method
`*function plus($i)

{
  `*return $this->value + $i;

}
`e invoke-method
$i->plus(7)
`e define-class-method

`e invoke-class-method
Counter::getInstances()
`e define-class-variable

`e get-and-set-class-variable

`e handle-undefined-method-invocation
`*function __call($name, $args)

{
  $argc = count($args);
  `*echo "no def: $name " .
    "arity: $argc\n";

}
`e alias-method

`e destructor
`*function __destruct()

{
  `*echo "bye, $this->value\n";

}
`e subclass
class Counter extends Int {
  private `*static $instances = 0;
  `*function __construct($int=0)
  {
    Counter::$instances += 1;
    parent::__construct($int);
  }
  `*function incr()
  {
    $this->value++;
  }
  `*static `*function getInstances()
  {
    `*return $instances;
  }
}
`e mixin

`e overload-operator

`e object-id

`e inspect-type
gettype(array()) == "array"

returns object for objects
`e basic-types
NULL

boolean

integer

double

string

array

object

resource

unknown type
`e inspect-class
returns FALSE if not an object:

get_class($o) == "Foo"
`e inspect-class-hierarchy
get_parent_class($o)
`e has-method
method_exists($o, "reverse")
`e message-passing
`*for ($i = 1; $i <= 10; $i++) {
  call_user_func(array($o,
    "phone$i"), NULL);
}
`e eval
eval evaluates to argument of return statement or NULL:
`*while ($line = fgets(STDIN)) {
  `*echo eval($line) . "\n";

}
`e list-obj-object-methods
get_class_methods($o)
`e list-object-attributes
get_object_vars($o)
`e list-loaded-libraries

`e list-loaded-namespaces

`e inspect-namespace

`e pretty-print
$d = array("lorem"=>1,
  "ipsum"=>array(2,3));


print_r($d);
`e source-line-number-and-file-name
__LINE__
__FILE__
`e command-line-documentation
none
`e get-local-hostname-dns-lookup-reverse-dns-lookup
$host = gethostname();

$ip = gethostbyname($host);

$host2 = gethostbyaddr($ip);
`e http-get
$url = 'http://www.google.com';

$s = file_get_contents($url);
`e http-post

`e serve-working-directory
$ php -S localhost:8000
`e absolute-url-from-base-and-relative-url
none
`e parse-url
$url = "http://google.com:80/foo?q=3#bar";

$up = parse_url($url);


$protocol = $up["scheme"];

$hostname = $up["host"];

$port = $up["port"];

$path = $up["path"];

$query_str = $up["query"];

$fragment = $up["fragment"];

`c[$params is associative array; if keys are reused, later values overwrite earlier values]

parse_str($query_str, $params);
`e url-encode-decode
urlencode("lorem ipsum?")

urldecode("lorem+ipsum%3F")
`e base64-encode-decode
$s = file_get_contents("foo.png");

$b64 = base64_encode($s);

$s2 = base64_decode($b64);
`e test-class
# pear install pear.phpunit.de/PHPUnit


<?php
Class FooTest extends
  PHPUnit_Framework_TestCase

{
  public `*function test_01()
  {
    $this->assertTrue(true,
      "not true!");
  }

}
?>
`e run-tests-run-test-method
$ phpunit test_foo.php


$ phpunit --filter test_01 test_foo.php
`e equality-assertion
$s = "do re me";

$this->assertEquals($s, "do re mi");

`c[also asserts args have same type:]

$this->assertSame($s, "do re mi");
`e approximate-assertion
$x = 10.0 * (1.0 / 3.0);

$y = 10.0 / 3.0;


$this->assertEquals($x, $y,
  "not within delta",
  pow(0.1, 6));
`e regex-assertion
$s = "lorem ipsum";

$this->assertRegExp("/lorem/", $s);
`e exception-assertion
class Bam extends Exception {};

public `*function test_exc {
  $this->SetExpectedException("Bam");
  throw new Bam("bam!");

}
`e mock-method
$mock = $this->getMock('Foo', ['foo']);

$mock->expects($this->once())
  ->method('foo')
  ->with(13)
  ->will($this->returnValue(7));


$mock->foo(13);
`e setup
public `*function setUp()

{
  `*echo "setting up\n";

}
`e teardown
public `*function tearDown()

{
  `*echo "tearing down\n";

}
`e check-syntax
$ php -l foo.php
`e stronger-warnings
none
`e lint

`e source-cleanup

`e run-debugger

`e debugger-commands

`e benchmark-code

`e profile-code
