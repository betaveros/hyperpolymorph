`e versions-used
ECMAScript 5
`e show-version
`$[node --version]
`e interpreter
`$[node foo.js]
`e repl
`$[node]
`e command-line-program
`$[node -e 'var sys = require("sys");
  sys.puts("hi world!");']
`e block-delimiters
{}
`e statement-terminator
; or newline

newline not separator inside (), [], {}, "", '', or after binary operator

newline sometimes not separator when following line would not parse as a valid statement
`e are-expressions-statements
yes
`e end-of-line-comment
// comment
`e multiple-line-comment
/* comment
another comment */
`e local-variable
`*var x = 1;
`e global-variable
`c[assign without using var]

g = 1;
`*function incr_global () { g++; }
`e assignment
x = 1;
`e parallel-assignment
`e swap
`*var tmp = x;
x = y;
y = tmp;
`e null
`=null
`e null-test
`*typeof v === `=["undefined"] && v === `=[null]
`e uninitialized-local-variable
`=undefined
`e uninitialized-global-variable
`=undefined
`e conditional-expression
x > 0 ? x : -x
`e true-and-false
`=true `=false
`e falsehoods
`=false `=null `=undefined "" 0 `=NaN
`e logical-operators
&& || !
`e relational-expression
x > 3
`e relational-operators
=== !== < > >= <=
`c[perform type coercion:]
== !=
`e min-and-max
Math.min(1, 2, 3)
Math.max(1, 2, 3)

Math.min.apply(Math, [1, 2, 3])
Math.max.apply(Math, [1, 2, 3])
`e arithmetic-expression
1 + 3
`e arithmetic-operators
+ - * / `c[none] %
`e integer-division
Math.floor(x / y)
`e integer-division-by-zero
returns assignable value `=Infinity, `=NaN, or -`=Infinity depending upon whether dividend is positive, zero, or negative.

There are literals for `=Infinity and `=NaN.
`e float-division
x / y
`e float-division-by-zero
`c[same behavior as for integers]
`e power
Math.pow(2, 32)
`e sqrt
Math.sqrt(2)
`e sqrt-1
`=NaN
`e transcendental-functions
Math.exp Math.log Math.sin Math.cos Math.tan Math.asin Math.acos Math.atan Math.atan2
`e transcendental-constants
Math.PI
Math.E
`e float-truncation
`c[none]

Math.round(3.1)

Math.floor(3.1)

Math.ceil(3.1)
`e absolute-value-and-signum
Math.abs(-3)
`e integer-overflow
`c[all numbers are floats]
`e float-overflow
`=Infinity
`e random-number-uniform-integer-uniform-float-normal-float
Math.floor(Math.random() * 100)

Math.random()
`c[none]
`e bit-operators
<< >> & | ^ ~
`e binary-octal-and-hex-literals
`c[none]
052
0x2a
`e radix
`e string-literal
`=["don't say \"no\""]
`=['don\'t say "no"']
`e newline-in-literal
yes
`e literal-escapes
`c[single and double quotes:]
`%[\b \f \n \r \t \v \uhhhh \xhh \" \' \\]
`e concatenate-strings
s = "Hello, " + "World!";
`e split
"do re mi".split(" ")
`e join
["do", "re", "mi"].join(" ")
`e translate-case
"lorem".toUpperCase()
"LOREM".toLowerCase()
`c[none]
`e strip
" lorem ".trim()
# some browsers:
" lorem".trimLeft()
"lorem ".trimRight()
`e pad
`e string-to-number
7 + `.parseInt("12", 10)

73.9 + `.parseFloat(".037")
`e number-to-string
`=["value: "] + 8
`e string-length
`=["lorem"].length
`e index-of-substring
`=["lorem ipsum"].indexOf(`=["ipsum"])
`e extract-substring
`=["lorem ipsum"].substr(6, 5)
`=["lorem ipsum"].substring(6, 11)
`e extract-character
`=["lorem ipsum"].charAt(6)
`=["lorem ipsum"].charCodeAt(6)
`e chr-and-ord
String.fromCharCode(65)
`=["A"].charCodeAt(0)
`e character-class-abbreviations-and-anchors
char class abbrevs:

. \d \D \s \S \w \W

anchors: ^ $ \b \B
`e match-test
`*if (s.match(`=[/1999/])) {
  alert("party!");
}
`e case-insensitive-match-test
"Lorem".match(`=[/lorem/i])
`e modifiers
g i m
`e substitution
s = "do re mi mi mi";
s.replace(`=[/mi/g], "ma");
`e group-capture
rx = `=[/^(\d{4})-(\d{2})-(\d{2})$/];
m = rx.exec('2009-06-03');
yr = m[1];
mo = m[2];
dy = m[3];
`e backreference-in-match-and-substitution
`=[/(w+) \1/].exec("do do")
"do re".replace(`=[/(\w+) (\w+)/], '$2 $1')
`e current-date-time
`*var t = `*new Date();
`e to-unix-epoch-from-unix-epoch
Math.round(t.getTime() / 1000)
`*var epoch = 1315716177;
`*var t2 = new Date(epoch * 1000);
`e parse-date-w-o-format
`*var t = new Date("July 7, 1999");
`e date-parts
t.getFullYear()
t.getMonth() + 1
t.getDate() `c[getDay(] is day of week)
`e time-parts
t.getHours()
t.getMinutes()
t.getSeconds()
`e build-date-time-from-parts
`*var yr = 1999;
`*var mo = 9;
`*var dy = 10;
`*var hr = 23;
`*var mi = 30;
`*var ss = 0;
`*var t = new Date(yr,mo-1,dy,hr,mi,ss);
`e list-name
array
`e list-literal
a = [1, 2, 3, 4]
`e list-size
a.length
`e empty-list
[]
`e empty-test
a.length === 0
`e head
a[0]
`e list-lookup
a[0]
`e list-update
a[0] = "lorem"
`e list-out-of-bounds
returns `=undefined
`e index-of-element
[6, 7, 7, 8].indexOf(7)
[6, 7, 7, 8].lastIndexOf(7)
`c[returns -1 if not found]
`e slice
["a", "b", "c", "d"].slice(1,3)
`e drop
["a", "b", "c", "d"].slice(1)
`e concatenate
a = [1, 2, 3].concat([4, 5, 6]);
`e manipulate-back
a = [6, 7, 8];
a.push(9);
i = a.pop();
`e manipulate-front
a = [6, 7, 8];
a.unshift(5);
i = a.shift();
`e iterate-over-elements
`*var len = a.length;
`*for (`*var i = 0; i < len; i++ ) {
  `.alert(a[i]);
}
`e reverse
`*var a = [1, 2, 3];
a.reverse();
`e sort
`*var a = [3, 1, 4, 2];
a.sort();
`e map
`c[callback gets 3 args: value, index, array]
a.map(`*function(x) { `*return x * x })
`e filter
a.filter(`*function(x) { `*return x > 1 })
`e fold-from-left
a.reduce(`*function(m, o) {
    `*return m + o;
  }, 0)
`e universal-test
`*var a = [1, 2, 3, 4];
`*var even = `*function(x) {
  `*return x % 2 == 0;
};
a.every(even)
`e existential-test
a.some(even)
`e map-literal
d = { "t":1, "f":0 };
`c[keys do not need to be quoted if they are a legal JavaScript variable name and not a reserved word]
`e map-size
`*var size = 0;
`*for (`*var k in d) {
  `*if (d.hasOwnProperty(k)) size++;
}
`e map-lookup
d.t

d["t"]
`e map-update
d["t"] = 2;

d.t = 2;
`e map-out-of-bounds
returns `=undefined
`e is-key-present
d.hasOwnProperty("t");
`e delete
`*delete d["t"];
`*delete d.t;
`e iteration
`*for (`*var k in d) {
  `c[use k or d[k]]
}
`e declare-function
`*function add(x, y) {
  return x+y;
}
`e invoke-function
add(1, 2)
`e missing-argument-behavior
`=undefined
`e extra-arguments
available in arguments
`e default-value
`e variable-number-of-arguments
args in arguments[0], arguments[1], … with number of args in arguments.length
`e return-value
return arg or undefined. If invoked with new and return value not an object, returns this
`e multiple-return-values
none
`e lambda
sqr = `*function(x) { return x*x; }
`e lambda-invocation
sqr(2)
`e default-scope
global unless declared with `*var
`e nested-function-visibility
not visible outside containing function
`e if
`*if (0 == n) {
  `.alert("no hits");
} `*else `*if (1 == n) {
  `.alert("1 hit");
} `*else {
  `.alert(n + " hits");
}
`e while
`*while ( i < 100 ) {
  i += 1;
}
`e break
`*break
`e continue
`*continue
`e break-continue-redo
`*break `*continue
`e c-style-for
`*for (`*var i=0; i<10; i++) {
  `.alert(i);
}
`e raise-exception
`*throw "bad arg";
`e catch-exception
`*try {
  risky();
} `*catch (e) {
  `.alert("risky failed");
}
`e finally
acquire_resource();
`*try {
  risky();
} `*finally {
  release_resource();
}
`e uncaught-exception-behavior
error to console; script terminates. Other scripts in page will execute

`e read-line-from-stdin
js:
`*var line = readline();
`e write-line-to-stdout
`*var sys = require('sys');

sys.puts("Hello, World!");
`e open-file-for-reading
`*var fs = require('fs');

f = fs.openSync("/tmp/foo", "r");
`e open-file-for-writing
`*var fs = require('fs');

f = fs.openSync("/tmp/foo", "w");
`e close-file
fs.closeSync(f);
`e read-line

`e iterate-over-file-by-line
`*var fs = require('fs');


`*var file = fs.readFileSync("/etc/hosts").toString();

file.split("\n").forEach(`*function (s) {
  use s

});
`e chomp

`e read-file
`*var fs = require('fs');


fs.readFileSync("/tmp/foo", "utf8");
`e write-to-file
fs.writeSync(f, "lorem ipsum");
`e flush-file-handle
none
`e file-exists-test-file-regular-test
`*var path = require('path');


path.existsSync("/etc/hosts");
`e file-size

`e is-file-readable-writable-executable

`e copy-file-remove-file-rename-file
`*var fs = require('fs');

??

fs.unlink("/tmp/foo");

fs.rename("/tmp/bar", "/tmp/foo");
`e set-file-permissions
`*var fs = require('fs');


fs.chmod("/tmp/foo", 0755);
`e temporary-file

`e build-pathname
`*var path = require('path');


path.join("/etc", "hosts");
`e dirname-and-basename
`*var path = require('path');


path.dirname("/etc/hosts");

path.basename("/etc/hosts");
`e iterate-over-directory-by-file
`*var fs = require('fs');

`*var sys = require('sys');


`*var a = fs.readdirSync("/etc");

`*for (`*var i=0; i<a.length; i++) {
  sys.puts(a[i]);

}
`e make-directory
`*var fs = require('fs');


fs.mkdirSync("/tmp/foo", 0755);

fs.mkdirSync("/tmp/foo/bar", 0755);
`e remove-empty-directory
`*var fs = require('fs');


fs.rmdirSync("/tmp/foo/bar");
`e remove-directory-and-contents

`e directory-test

`e command-line-arguments
process.argv.length

process.argv[0]

process.argv[1]

…
`e environment-variable

`e exit
process.exit(0)
`e external-command
`*var exec =
  require('child_process').exec;

`*var child = exec('ls');
`e backticks
`*var exec =
  require('child_process').exec;

`*var f = `*function(err, fout, ferr) {
  output in fout

};

`*var child = exec('ls', f);
`e library
`$[cat foo.js]

`*function add(x,y) {
  return x+y;
}
`e import-library
<`*script src=`=["foo.js"]/>

<`*script>
`.alert(add(3,7));
</`*script>
`e library-path
`c[node.js, not available in repl:]

require.paths
`e library-path-environment-variable

`e declare-namespace

`e namespace-separator

`e list-installed-packaged-install-a-package
`$[npm ls]

`$[npm install tmp]
`e define-class

`e create-object

`e create-blank-object
`*var o = `*new Object(); or

`*var o = {};
`e set-attribute
o.score = 21;
`e get-attribute
`*if (o.score == 21) {
  `.alert("Blackjack!");
}
`e define-method
o.doubleScore = `*function() {
  `*return this.score * 2;
};
`e invoke-method
`.alert("Answer: " + o.doubleScore());
`e clone-object
`*var o2 = Object.create(o);
`e object-literal
`*var o = {
  score: 21,
  doubleScore: `*function() {
    `*return this.score * 2;
  }
};
`e inspect-type
typeof o
`e has-method
typeof o.foo == 'function'
`e message-passing
o["foo"](1,1)
`e eval
x = `.eval("1 + 1");
`e inspect-methods

`e inspect-attributes

