`e version-used
4.0
`e show-version
`$[ocaml -version]
`e interpreter
`$[echo 'print_endline "hello"' > hello.ml]
`$[ocaml hello.ml]
`e shebang
`$[cat <<EOF > hello.ml]
#!/usr/bin/env ocaml
print_endline "hello";;
EOF

`$[chmod +x hello.ml]
`$[./hello.ml]
`e bytecode-compiler-and-interpreter
`$[echo 'print_endline "hello";;' > hello.ml]
`$[ocamlc -o hello hello.ml]
`$[ocamlrun hello]
`e native-compiler
`$[echo 'print_endline "hello";;' > hello.ml]
`$[ocamlopt hello.ml -o hello]
`$[./hello]
`e library-which-is-always-imported
Pervasives
`e statement-terminator
;;
`e block-delimiters
( expr ; … )

begin expr ; … end
`e end-of-line-comment
`e multiple-line-comment
(* comment
another comment *)
`e constant
`*let n = 1 + 2;;
`e local-variable
`*let n = `*ref 3;;
n := 4;;
!n + 7;;
`e unit-type-and-value
unit
()
`e conditional-expression
`*let n = -3;;
`*let absn = `*if n < 0 `*then -n `*else n;;
`e branch-type-mismatch
`![compilation error:]

`*if `=true `*then "hello" `*else 3;;
`e null
`.None `c[type 'a option]
`e nullable-type
`*type list_option_int = `.int option list;;


`*let list = [`.Some 3; `.None; `.Some (-4)];;
`e null-test
`*match foo `*with
  | `.None -> `=true
  | _ -> `=false;;
`e coalesce
`*match foo `*with
  | `.None -> 0
  | `.Some n -> n;;
`e nullif
`*match foo `*with
  | -999 -> `.None
  | n -> `.Some n;;
`e expression-type-declaration
`.float 1
`e let-in
`*let z =
  `*let x = 3.0 in
  `*let y = 2.0 *. x in
  x *. y;;
`e where
none
`e boolean-type
bool
`e true-and-false
`=true `=false
`e logical-operators
&& || not
`e relational-operators
`+[= <> < > <= >=]
`[== !=] `c[warning: == and != test for "physical equality"]
`e min-and-max
min 1 2
max 1 2
`e integer-type
`.int
`c[other integer types:]
int32 int64 nativeint
`e integer-literal
`.int, int64, and nativeint literals:
12 12L 12n
`c[literals can contain underscores:]
1_000_000
`c[this parses as an expression:]
-4
`e float-type
`.float
`e integer-operators
`+[+ - * /] `*mod
`c[mod is an infix operator, and is signed like % or rem in other languages]
`e float-operators
`+[+. -. *. /.]
`e add-integer-and-float
`.float 3 `+[+.] 7.0
`e divmod
7 `+/ 3
7 `*mod 3
`e integer-division-by-zero
raises Division_by_zero
`e float-division
`.float 7 /. `.float 3
`e float-division-by-zero
infinity nan or neg_infinity
`e power
2.0 ** 32.0
`e sqrt
sqrt 2.0
`e sqrt-1
sqrt (-1.0):
nan
`e transcendental-functions
exp log
sin cos tan
asin acos atan atan2
`e transcendental-constants
4.0 *. atan 1.0
exp 1.0
`e float-truncation
truncate 3.14
`c[none]
floor 3.14 `c[returns float]
ceil 3.14 `c[returns float]
`e absolute-value-and-signum
abs (-7)
abs_float (-7.0)
no signum
`e integer-overflow
modular arithmetic
`e float-overflow
infinity
`e arbitrary-length-integer
open Big_int;;

`*let n = big_int_of_int 7;;
`*let m = big_int_of_int 12;;
`e arbitrary-length-integer-operators
add_big_int n m
sub_big_int n m
mult_big_int n m
div_big_int n m (* quotient *)
mod_big_int n m
eq_big_int n m
lt_big_int n m
gt_big_int n m
le_big_int n m
ge_big_int n m
`e rational-type
`e rational-construction
`e rational-decomposition
`e complex-type
Complex.t
`e complex-constants
Complex.zero
Complex.one
Complex.i
`e complex-operators
Complex.add z w;;
Complex.sub z w;;
Complex.mul z w;;
Complex.div z w;;
`e complex-construction
{Complex.re=1.0; Complex.im=2.0}
`e complex-decomposition
`*let z = {Complex.re=1.0; Complex.im=2.0};;

z.Complex.re;;
z.Complex.im;;
Complex.arg z;;
Complex.norm z;;
Complex.conj z;;
`e random-number-uniform-integer-uniform-float-normal-float
Random.int 100
Random.float 1.0
`c[none]
`e random-seed
Random.init 17;;
`*let seed = Random.get_state();;
Random.set_state seed;;
`e bit-operators
1 lsl 4

1 lsr 4

1 land 3

1 lor 3

1 lxor 3

lnot 1
`e binary-octal-and-hex-literals
`=0b101010
`=0o52
`=0x2a
`e radix-convert-integer-to-and-from-string-with-radix

`e string-type
string
`e string-literal
`=["Hello, World!"]
`e newline-in-literal
no
`e literal-escapes
`%[\b \n \r \t \" \' \\]

`%[\ooo \xhh]
`e format

`e concatenate-strings
`=["Hello"] `+^ `=[", "] `+^ `=["World!"]
`e replicate
String.make 80 '-'
`e translate-case
String.uppercase "hello"

String.lowercase "HELLO"
`e capitalize
String.capitalize "hello"
`e trim
String.trim " hello "
`e pad

`e number-to-string
`=["two: "] `+^ string_of_int `=2

`=["pi: "] `+^ float_of_string `=[3.14]
`e string-to-number
`=[7] `++ int_of_string `=["12"]

`=[73.9] `+[+.] float_of_string `=[".037"]
`e join

`e split

`e character-type
char
`e character-literal
`=['h']
`e string-length
String.length "hello"
`e index-of-substring

`e extract-substring
String.sub "hello" 0 4
`e extract-character
`=["hello"].[0]
`e chr-and-ord
Char.code 'a'

Char.chr 97
`e date-time-type

`e current-date-time

`e current-unix-epoch
open Unix;;

(* float: *)

time();;
`e literal

`e size

`e lookup

`e update

`e out-of-bounds

`e literal
[1; 2; 3]
`e empty-list
[]
`e empty-test
`*let list = [1; 2; 3];;


list == []
`e cons
1 :: [2; 3]
`e head
List.hd [1; 2; 3]
`e tail
List.tl [1; 2; 3]
`e head-and-tail-of-empty-list
exceptions
`e string-length
List.length [1; 2; 3]
`e list-lookup
List.nth [1; 2; 3] 0
`e index-of-element

`e update

`e concatenate-two-lists-list-of-lists
[1; 2] @ [3; 4]

List.append [1; 2] [3; 4]


List.concat [[1; 2]; [3; 4]]
`e last-and-butlast

`e take

`e drop

`e iterate-over-elements
`*let f i =
  print_endline (string_of_int i);;


List.iter f [1; 2; 3];;
`e reverse
List.rev [1; 2; 3]
`e sort
List.sort min [1; 3; 2; 4]

List.sort max [1; 3; 2; 4]
`e map
List.map (( * ) 2) [1; 2; 3]
`e filter
List.filter ((<) 2) [1; 2; 3]
`e fold-from-left
List.fold_left (+) 0 [1; 2; 3]
`e fold-from-right
List.fold_right (-) [1; 2; 3] 0
`e membership

`e universal-test
List.for_all (fun x -> x > 2) [1; 2; 3];;
`e existential-test
List.exists (fun x -> x > 2) [1; 2; 3];;
`e zip-lists

`e tuple
(1, "hello", `=true)
`e tuple-element-access
`*match (1, "hello", `=true) `*with _, x, _ -> x
`e pair-element-access
fst (12, "December")

snd (12, "December")
`e define-function
`*let average a b = ( a +. b ) /. 2.0;;
`e invoke-function
(* 4.5: *)

average 1.0 2.0 +. 3.0;;

(* 3.0: *)

average 1.0 (2.0 +. 3.0);;
`e define-function-with-block-body

`e named-parameters
`*let subtract ~m ~s = m - s;;


subtract ~s: 3 ~m: 7;;
`e named-parameter-default-value
`*let logarithm ?(base = (exp 1.0)) x = log x /. (log base);;


logarithm 2.718;;

logarithm ~base: 2.0 10.0;;
`e piecewise-defined-function
`*let to_s = function Red -> "red"
  | Green -> "green"
  | Blue -> "blue";;
`e recursive-function
`*let rec range a b =

`*if a > b `*then []

`*else a :: range (a+1) b;;
`e mutually-recursive-functions
`*let rec even n = `*if n = 0 `*then `=true `*else odd (n-1)

and odd n = `*if n = 0 `*then `=false `*else even (n-1);;
`e lambda
fun x -> fun y -> (x +. y) /. 2.0
`e infix-operator-in-prefix-position
( * ) 3 4;;
`e function-in-infix-position
none
`e currying
`*let plus2 = (+) 2;;
`e composition

`e function-composition-operator
none
`e lazy-evaluation
`*let arg1 x y = x;;


arg1 7 (lazy (1/0) );;
`e strict-evaluation
default behavior
`e if
`*if x > 0 `*then
  print_endline "pos";;
`e control-structure-keywords
`*if x > 0 `*then
  print_endline "pos"
`*else
  `*if x < 0 `*then
    print_endline "neg"
  `*else
    print_endline "zero";;
`e sequencing
print_endline "one";

print_endline "two";

print_endline "three";;
`e while
`*let i = ref 0;;


while !i < 10 do
  print_endline (string_of_int !i);
  i := !i + 1

done;;
`e for
for i = 1 to 10 do
  `*let s = string_of_int i in
  print_endline s

done;;
`e for-in-reverse
for i = 10 downto 1 do
  `*let s = string_of_int i in
  print_endline s

done;;
`e list-iteration
none
`e loop
`*let rec loop i =
  `*if i <= 10 `*then begin
    print_endline (string_of_int i);
    loop (i+1)
  end in

loop 0;;
`e raise-error
raise (Failure "bam!");;
or

failwith "bam!";;
`e handle-error
`*let x = `*try 1 / 0 `*with Division_by_zero -> 0;;
`e type-of-exceptions
exn
`e user-defined-exception
exception Foo `*of string;;

raise (Foo "invalid input");;
`e standard-exceptions
Division_by_zero

Failure string

Not_found

Invalid_argument string

Match_failure (string, `.int, `.int)

Assert_failure (string, `.int, `.int)

Out_of_memory

Stack_overflow
`e assert
assert(1 = 0);;
`e standard-file-handles
stdin stdout stderr
`e read-line-from-stdin
`*let line = read_line();;
`e end-of-file-behavior
raises End_of_file
`e chomp

`e write-line-to-stdout
print_endline "lorem ipsum";;
`e printf

`e open-file-for-reading
`*let f = open_in "/etc/passwd";;
`e open-file-for-writing
`*let f = open_out "/tmp/ocaml.out";;
`e open-file-for-appending

`e close-file

`e i-o-errors

`e read-line
`*let ic = open_in "/etc/passwd" in

`*let line = input_line ic in

print_endline line;;
`e iterate-over-file-by-line

`e read-file-into-array-of-strings

`e read-file-into-string

`e write-string

`e write-line
open Printf

`*let oc = open_out "/tmp/test-ocaml" in

fprintf oc "hello out\n";

close_out oc;;
`e flush-file-handle

`e end-of-file-test

`e get-and-set-filehandle-position

`e file-exists-test-regular-file-test
open Unix


`*try `.Some (stat "/etc/hosts") `*with
  Unix_error (ENOENT, _, _) -> `.None


(stat "/etc/hosts").st_kind = S_REG
`e file-size
(stat "/etc/hosts").st_size
`e is-file-readable-writable-executable
open Unix


`*try access "/tmp/bar" [R_OK]; `=true `*with
  Unix.Unix_error (EACCES, _, _) -> `=false;;

`*try access "/tmp/bar" [W_OK]; `=true `*with
  Unix.Unix_error (EACCES, _, _) -> `=false;;

`*try access "/tmp/bar" [X_OK]; `=true `*with
  Unix.Unix_error (EACCES, _, _) -> `=false;;
`e set-file-permissions
open Unix


chmod "/tmp/foo" 0o755
`e copy-file-remove-file-rename-file
open Unix

??

unlink "/tmp/foo"

rename "/tmp/bar" "/tmp/foo"
`e create-symlink-symlink-test-readlink
open Unix


symlink "/etc/hosts" "/tmp/hosts"

(lstat "/tmp/hosts").st_kind = S_LNK

readlink "/tmp/hosts"
`e generate-unused-file-name
open Filename

(* prefix and suffix: *)

temp_file "foo" ".txt"
`e build-pathname
open Filename


concat "/etc" "hosts"
`e dirname-and-basename
open Filename


dirname "/etc/hosts"

basename "/etc/hosts"
`e iterate-over-directory-by-file

`e make-directory
(* opam install fileutils *)

open FileUtil


mkdir ~parent:true "/tmp/foo/bar"
`e remove-empty-directory
open Unix


rmdir "/tmp/foodir"
`e remove-directory-and-contents

`e directory-test

`e system-temporary-file-directory

`e command-line-arguments
for i = 0 to Array.length Sys.argv - 1 do
  print_endline i Sys.argv.(i)

done
`e program-name

`e getopt

`e get-and-set-environment-variable
open Unix


s = getenv "HOME"

putenv "PATH" "/bin"
`e get-pid-parent-pid
open Unix


`*let pid = getpid()

`*let ppid = getppid()
`e get-user-id-and-name
`*let uid = getuid()

`*let username =
  (getpwuid (getuid())).pw_name
`e exit
exit 0


exit 1
`e set-signal-handler

`e external-command

`e escaped-external-command

`e backticks

`e namespace-example

`e namespaces

`e file-name-restrictions
module Foo.Bar must be in Foo.ml
`e namespace
open Graphics;;
`e namespace-creation
put code in file MODULE_NAME.ml
`e namespace-alias
module Gr = Graphics;;
`e namespace-separator
.
`e subnamespace
in A.ml:

module B =

sig
  val display_instruction : unit -> unit

end =

struct
  `*let msg = "attack"
  `*let display_instruction () = print_endline msg

end
in client source:

A.B.display_instruction;;
`e package-manager-setup
do this once:

$ opam init

for each shell session:

$ eval $(opam config env)
`e package-manager-search-install-list-installed
$ opam search utop

$ opam install utop

$ opam list --installed
`e compile-app-using-package

`e type-synonym
`*type name = string;;
`e sum-type
`*type color = Red | Green | Blue;;


`*let col = Red;;

(* evaluates to true: *)

col < Green;;
`e tuple-product-type-with-one-field
`*type special_int = SpecialInt `*of `.int;;


`*let n = SpecialInt 7;;
`e tuple-product-type-with-two-fields
`*type int_pair = IntPair `*of `.int * `.int;;


`*let p = IntPair (7, 11);;
`e record-product-type
`*type customer = {
  id: `.int;
  name: string;
  address: string

};;
`e record-product-type-literal
`*let cust = {
  id=7;
  name="John";
  address="Topeka, KS"

};;
`e generic-type
`*type ('a, 'b) twosome =
  Twosome `*of 'a * 'b;;


`*let p = Twosome ("pi", 3.14);;
`e recursive-type
`*type binary_tree =
  | Leaf `*of `.int
  | Tree `*of binary_tree * binary_tree;;
`e pattern-match-sum-type
`*let col = Red;;


`*let s = `*match col `*with
  | Red -> "red"
  | Blue -> "blue"
  | Green -> "green";;
`e pattern-match-product-type

`e pattern-match-guard
`*match i `*with j `*when i < 0 -> -j | j -> j;;
`e pattern-match-catchall
`*let to_s c = `*match c `*with Red -> "red" | _ -> "not red";;

to_s Green;;
`e define-class
class counter = object
  val mutable n = 0
  method incr = n <- n+1
  method get = n

end;;
`e create-object
`*let c = new counter;;
`e invoke-method
c#incr;;

c#get;;
`e field-access
none
`e overload-function

`e inheritance

`e invoke-repl
$ ocaml

Use this if you want history:

$ rlwrap ocaml

The utop toplevel, which can be installed via opam, also provides history.
`e repl-limitations

`e repl-last-value
none
`e help
none
`e quit
^D
`e inspect-type
repl displays the type of any expression entered
`e inspect-namespace
module Unix = Unix;;
`e load-source-file
#use "hello";;
`e load-package
consider adding to .ocamlinit:

#use "topfind";;

# thread;;

#require "core";;

open Core.Std;;
`e search-path
#directory "libdir";;
`e set-search-path-on-command-line
ocaml -Ilibdir
